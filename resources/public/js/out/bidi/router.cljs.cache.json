["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$bidi.router","~:imports",["^ ","~$History","~$goog.History"],"~:requires",["^ ","~$bidi","~$bidi.bidi","^<","^<","~$h","^9","^9","^9","~$e","~$goog.events","^=","^=","~$s","~$clojure.string","^>","^>","^8","^9"],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$Router",["^ ","~:meta",["^ ","~:file","/home/huxley/code/clojure/eckersdorf/resources/public/js/out/bidi/router.cljs","~:line",8,"~:column",14,"~:end-line",8,"~:end-column",20,"~:doc",null,"~:protocol-symbol",true,"~:jsdoc",["~#list",["@interface"]],"~:protocol-info",["^ ","~:methods",["^ ","~$set-location!",[["~$_","~$location"]],"~$replace-location!",[["~$_","^P"]]]]],"^J",true,"^5","~$bidi.router/Router","^D","resources/public/js/out/bidi/router.cljs","^H",20,"^F",1,"^E",8,"^M",["^ ","^N",["^ ","^O",[["~$_","^P"]],"^Q",[["~$_","^P"]]]],"~:info",null,"^G",8,"~:tag","~$any","~:impls",["^4",["~$bidi.router/t_bidi$router45412"]],"^I",null,"^K",["^L",["@interface"]]],"^O",["^ ","~:protocol-inline",null,"^C",["^ ","^D","/home/huxley/code/clojure/eckersdorf/resources/public/js/out/bidi/router.cljs","^E",9,"^F",4,"^G",9,"^H",17,"~:protocol","^R","^I",null,"~:arglists",["^L",["~$quote",["^L",[["~$_","^P"]]]]]],"^Y","^R","^5","~$bidi.router/set-location!","~:variadic",false,"^D","resources/public/js/out/bidi/router.cljs","^H",17,"~:method-params",["^L",[["~$_","^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^L",[null,null]],"^F",1,"^E",8,"^G",9,"~:max-fixed-arity",2,"~:fn-var",true,"^Z",["^L",["^[",["^L",[["~$_","^P"]]]]],"^I",null],"^Q",["^ ","^X",null,"^C",["^ ","^D","/home/huxley/code/clojure/eckersdorf/resources/public/js/out/bidi/router.cljs","^E",10,"^F",4,"^G",10,"^H",21,"^Y","^R","^I",null,"^Z",["^L",["^[",["^L",[["~$_","^P"]]]]]],"^Y","^R","^5","~$bidi.router/replace-location!","^11",false,"^D","resources/public/js/out/bidi/router.cljs","^H",21,"^12",["^L",[["~$_","^P"]]],"^13",null,"^14",["^L",[null,null]],"^F",1,"^E",8,"^G",10,"^15",2,"^16",true,"^Z",["^L",["^[",["^L",[["~$_","^P"]]]]],"^I",null],"~$start-router!",["^ ","^X",null,"^C",["^ ","^D","/home/huxley/code/clojure/eckersdorf/resources/public/js/out/bidi/router.cljs","^E",12,"^F",7,"^G",12,"^H",20,"^Z",["^L",["^[",["^L",[["~$routes",["^ ","~:keys",["~$on-navigate","~$default-location"],"~:or",["^ ","^1;",["^L",["~$constantly",null]]]]]]]]],"^I","Starts up a Bidi router based on Google Closure's 'History'\n\n  Types:\n\n    Location :- {:handler ...\n                 :route-params {...}}\n\n  Parameters:\n\n    routes :- a Bidi route structure\n    on-navigate :- 0-arg function, accepting a Location\n    default-location :- Location to default to if the current token doesn't match a route\n\n  Returns :- Router\n\n  Example usage:\n\n    (require '[bidi.router :as br])\n\n    (let [!location (atom nil)\n          router (br/start-router! [\"\" {\"/\" ::home-page\n                                          \"/page2\" ::page2}]\n                                   {:on-navigate (fn [location]\n                                                   (reset! !location location))\n                                    :default-location {:handler ::home-page}})]\n\n      ...\n\n      (br/set-location! router {:handler ::page2}))"],"^5","~$bidi.router/start-router!","^11",false,"^D","resources/public/js/out/bidi/router.cljs","^H",20,"^12",["^L",[["^19","~$p__45403"]]],"^13",null,"^14",["^L",[null,null]],"^F",1,"^E",12,"^G",12,"^15",2,"^16",true,"^Z",["^L",["^[",["^L",[["^19",["^ ","^1:",["^1;","^1<"],"^1=",["^ ","^1;",["^L",["^1>",null]]]]]]]]],"^I","Starts up a Bidi router based on Google Closure's 'History'\n\n  Types:\n\n    Location :- {:handler ...\n                 :route-params {...}}\n\n  Parameters:\n\n    routes :- a Bidi route structure\n    on-navigate :- 0-arg function, accepting a Location\n    default-location :- Location to default to if the current token doesn't match a route\n\n  Returns :- Router\n\n  Example usage:\n\n    (require '[bidi.router :as br])\n\n    (let [!location (atom nil)\n          router (br/start-router! [\"\" {\"/\" ::home-page\n                                          \"/page2\" ::page2}]\n                                   {:on-navigate (fn [location]\n                                                   (reset! !location location))\n                                    :default-location {:handler ::home-page}})]\n\n      ...\n\n      (br/set-location! router {:handler ::page2}))"],"~$t_bidi$router45412",["^ ","~:num-fields",9,"~:protocols",["^4",["^R","~$cljs.core/IMeta","~$cljs.core/IWithMeta"]],"^5","^W","^D","resources/public/js/out/bidi/router.cljs","~:type",true,"~:anonymous",true,"^F",7,"^E",71,"~:record",false,"~:skip-protocol-flag",["^4",["^1D","^1E"]]],"~$->t_bidi$router45412",["^ ","^X",null,"^C",["^ ","^1G",true,"^1C",["^4",["^R","^1D","^1E"]],"^1I",["^4",["^1D","^1E"]],"~:factory","~:positional","^Z",["^L",["^[",["^L",[["^19","^1@","~$map__45404","^1;","^1<","~$history","~$token->location","~$location->token","~$meta45413"]]]]],"^D",null],"^1C",["^4",["^R","^1D","^1E"]],"^5","~$bidi.router/->t_bidi$router45412","^11",false,"^D","resources/public/js/out/bidi/router.cljs","^12",["^L",[["^19","^1@","^1M","^1;","^1<","^1N","^1O","^1P","^1Q"]]],"^13",null,"^14",["^L",[null,null]],"^1G",true,"^F",7,"^1K","^1L","^E",71,"^15",9,"^16",true,"^Z",["^L",["^[",["^L",[["^19","^1@","^1M","^1;","^1<","^1N","^1O","^1P","^1Q"]]]]],"^1I",["^4",["^1D","^1E"]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^1P","^1;","^1@","^1M","^19","~:params","~:default-location","~:route-params","^1O","^1N","^1<","^1Q","~:on-navigate","~:handler"]],"~:order",["^1Z","^1X","^1[","^1Y","^1W","^19","^1@","^1M","^1;","^1<","^1N","^1O","^1P","^1Q"]],"^I",null]