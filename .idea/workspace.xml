<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="a1565c9d-e360-4856-958e-e9c029697a22" name="Default" comment="">
      <change type="DELETED" beforePath="$PROJECT_DIR$/Ribelo@s2.mydevil.net" afterPath="" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/workspace.xml" afterPath="$PROJECT_DIR$/.idea/workspace.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/project.clj" afterPath="$PROJECT_DIR$/project.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/resources/public/js/app.js" afterPath="$PROJECT_DIR$/resources/public/js/app.js" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FavoritesManager">
    <favorites_list name="eckersdorf" />
  </component>
  <component name="FileColors">
    <fileColor scope="Non-Project Files (Material Default)" color="2E3C43" />
    <fileColor scope="Non-Project Files (Material Darker)" color="323232" />
    <fileColor scope="Non-Project Files (Material Lighter)" color="eae8e8" />
    <fileColor scope="Non-Project Files (Material Palenight)" color="2f2e43" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="repl.clj" pinned="false" current-in-tab="true">
        <entry file="file://$PROJECT_DIR$/env/dev/clj/eckersdorf/repl.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="243">
              <caret line="56" column="6" lean-forward="false" selection-start-line="56" selection-start-column="6" selection-end-line="56" selection-end-column="6" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="2530">
              <caret line="110" column="105" lean-forward="false" selection-start-line="110" selection-start-column="105" selection-end-line="110" selection-end-column="105" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="subs.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/subs.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1794">
              <caret line="78" column="80" lean-forward="false" selection-start-line="78" selection-start-column="80" selection-end-line="78" selection-end-column="80" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="app.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/env/dev/cljs/eckersdorf/app.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="138">
              <caret line="6" column="23" lean-forward="false" selection-start-line="6" selection-start-column="0" selection-end-line="6" selection-end-column="23" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="db.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/db.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="368">
              <caret line="16" column="18" lean-forward="false" selection-start-line="16" selection-start-column="18" selection-end-line="16" selection-end-column="18" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="ui.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/ui.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="3151">
              <caret line="137" column="92" lean-forward="false" selection-start-line="137" selection-start-column="92" selection-end-line="137" selection-end-column="92" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="contacts.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/contacts.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1173">
              <caret line="51" column="61" lean-forward="false" selection-start-line="51" selection-start-column="61" selection-end-line="51" selection-end-column="61" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="ui.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/ui.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="6118">
              <caret line="266" column="69" lean-forward="false" selection-start-line="266" selection-start-column="69" selection-end-line="266" selection-end-column="69" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="specs.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="920">
              <caret line="40" column="44" lean-forward="false" selection-start-line="40" selection-start-column="44" selection-end-line="40" selection-end-column="44" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="users.clj" pinned="false" current-in-tab="false">
        <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/users.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="1610">
              <caret line="70" column="81" lean-forward="false" selection-start-line="70" selection-start-column="81" selection-end-line="70" selection-end-column="81" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Clojure Namespace" />
        <option value="CLJC Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>spec</find>
      <find>devto</find>
      <find>clojure</find>
      <find>figwheel</find>
      <find>eckersdorf.specs.workplaces</find>
      <find>eckersdorf.repl</find>
      <find>concatc</find>
      <find>co</find>
      <find>mess</find>
      <find>make-reaction</find>
      <find>print</find>
      <find>:println</find>
      <find>email-addon</find>
      <find>email-address</find>
      <find>dodaj</find>
      <find>:contacts/show-dialog?</find>
      <find>request</find>
      <find>modify</find>
      <find>filtered</find>
      <find>contact/contact</find>
      <find>string</find>
      <find>email-add</find>
      <find>println</find>
      <find>create-user</find>
      <find>roles</find>
      <find>admin</find>
      <find>&quot;user&quot;</find>
      <find>user/full</find>
      <find>wolne</find>
      <find>npm</find>
    </findStrings>
    <dirStrings>
      <dir>$PROJECT_DIR$/src</dir>
    </dirStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/resources/config.edn" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/db.cljs" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/nrepl.clj" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/utils.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/subs.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/ui.cljs" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/work_schedule.clj" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/events.cljs" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/db/work_schedule.clj" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/db/specs.cljc" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/address.cljc" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/users.cljc" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/workers.cljc" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/workers.clj" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/core.clj" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/db/workers.clj" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/contacts.cljc" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/view/events.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/core.cljs" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/workplaces.cljc" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/work_schedule.cljc" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/db/core.clj" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs/base.cljc" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/contacts/utils.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/view/ui.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/init.cljs" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/db/contacts.clj" />
        <option value="$PROJECT_DIR$/env/dev/cljs/eckersdorf/repl.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/contacts/db.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/contacts/events.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/contacts/subs.cljs" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/specs.cljc" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/contacts/ui.cljs" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/contacts.clj" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/db/users.clj" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$PROJECT_DIR$/env/dev/clj/eckersdorf/repl.clj" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="NodeModulesDirectoryManager">
    <handled-path value="$PROJECT_DIR$/node_modules" />
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="13" />
    <option name="y" value="12" />
    <option name="width" value="1340" />
    <option name="height" value="743" />
  </component>
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <expanded-state>
          <State>
            <id />
          </State>
          <State>
            <id>Assignment issuesGroovy</id>
          </State>
          <State>
            <id>Assignment issuesJava</id>
          </State>
          <State>
            <id>Bitwise operation issuesJavaScript</id>
          </State>
          <State>
            <id>Control flow issuesJava</id>
          </State>
          <State>
            <id>GeneralJavaScript</id>
          </State>
          <State>
            <id>Groovy</id>
          </State>
          <State>
            <id>Java</id>
          </State>
          <State>
            <id>JavaScript</id>
          </State>
          <State>
            <id>Potentially confusing code constructsGroovy</id>
          </State>
          <State>
            <id>Potentially confusing code constructsJavaScript</id>
          </State>
          <State>
            <id>Probable bugsGroovy</id>
          </State>
          <State>
            <id>Probable bugsJava</id>
          </State>
          <State>
            <id>Probable bugsJavaScript</id>
          </State>
          <State>
            <id>Spelling</id>
          </State>
          <State>
            <id>Threading issuesGroovy</id>
          </State>
          <State>
            <id>Threading issuesJava</id>
          </State>
          <State>
            <id>UI Form Problems</id>
          </State>
          <State>
            <id>XPath</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>SpellCheckingInspection</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="Scratches">
        <subPane>
          <expand>
            <path>
              <item name="" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
              <item name="Extensions" type="d62648e6:ScratchProjectViewPane$MyRootNode" />
            </path>
            <path>
              <item name="" type="1a2a3e82:ScratchProjectViewPane$MyProjectNode" />
              <item name="Extensions" type="d62648e6:ScratchProjectViewPane$MyRootNode" />
              <item name="com.intellij.database" type="61db50fb:ScratchProjectViewPane$MyPsiNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="db" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="routes" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="routes" type="462c0819:PsiDirectoryNode" />
              <item name="services" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljc" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljc" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="contacts" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="view" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="work_schedule" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="workers" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="PackagesPane" />
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToClass.includeLibraries" value="false" />
    <property name="GoToClass.toSaveIncludeLibraries" value="false" />
    <property name="GoToFile.includeJavaFiles" value="false" />
    <property name="MemberChooser.sorted" value="false" />
    <property name="MemberChooser.showClasses" value="true" />
    <property name="MemberChooser.copyJavadoc" value="false" />
    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/src" />
    <property name="nodejs_interpreter_path" value="/usr/bin/node" />
    <property name="cursive.last.file.extension./home/huxley/code/clojure/eckersdorf/src/clj" value="clj" />
    <property name="cursive.last.file.extension./home/huxley/code/clojure/eckersdorf/src/cljc" value="cljc" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/cljs/eckersdorf" />
    </key>
  </component>
  <component name="ReplState" timestamp="1510602292612">{:repl-history {:ide [], :local [{:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 0)})&quot;, :offset 205, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 1)})&quot;, :offset 205, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 205, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println begin-datetime end-datetime)\n    (mc/find-maps db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                      :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                   \&quot;$lte\&quot; end-datetime}})))&quot;, :offset 623, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println datetime begin-datetime end-datetime)\n    (mc/find-maps db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                      :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                   \&quot;$lte\&quot; end-datetime}})))&quot;, :offset 632, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println datetime begin-datetime end-datetime)\n    (mc/aggregate db \&quot;work-schedule\&quot; [\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id\n                                                :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                             \&quot;$lte\&quot; end-datetime}}])))&quot;, :offset 663, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println workplace-id)\n    (mc/aggregate db \&quot;work-schedule\&quot; [\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id\n                                                :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                             \&quot;$lte\&quot; end-datetime}}])))&quot;, :offset 639, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println workplace-id)\n    (mc/aggregate db \&quot;work-schedule\&quot; [\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id}])))&quot;, :offset 442, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println workplace-id)\n    (mc/aggregate db \&quot;work-schedule\&quot; [{\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id\n                                                 :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                              \&quot;$lte\&quot; end-datetime}}}\n                                      {\&quot;$group\&quot; {:_id                 :work-schedule/worker-id\n                                                 :work-schedule/works {\&quot;$push\&quot; \&quot;$$ROOT\&quot;}}}])))&quot;, :offset 829, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println workplace-id)\n    (mc/aggregate db \&quot;work-schedule\&quot; [{\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id\n                                                 :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                              \&quot;$lte\&quot; end-datetime}}}\n                                      {\&quot;$group\&quot; {:_id                 \&quot;$work-schedule/worker-id\&quot;\n                                                 \&quot;$work-schedule/worker-id\&quot; {\&quot;$push\&quot; \&quot;$$ROOT\&quot;}}}])))&quot;, :offset 837, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println workplace-id)\n    (mc/aggregate db \&quot;work-schedule\&quot; [{\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id\n                                                 :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                              \&quot;$lte\&quot; end-datetime}}}\n                                      {\&quot;$group\&quot; {:_id                 \&quot;$work-schedule/worker-id\&quot;\n                                                 :work-schedule/works {\&quot;$push\&quot; \&quot;$$ROOT\&quot;}}}])))&quot;, :offset 831, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println workplace-id)\n    (mc/aggregate db \&quot;work-schedule\&quot; [{\&quot;$match\&quot; {:work-schedule/workplace-id workplace-id\n                                                 :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                              \&quot;$lte\&quot; end-datetime}}}])))&quot;, :offset 643, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(group-by :work-schedule/worker-id\n          (db.work-schedule/month-query tmp-db\n                                        {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                                         :work-schedule/datetime     (dt/date-time 2017 8)}))&quot;, :offset 271, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (-&gt;&gt; (mc/find-maps db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                           :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                        \&quot;$lte\&quot; end-datetime}})\n         (group-by :work-schedule/worker-id))))&quot;, :offset 642, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(db.workers/reset-workers-collection tmp-db)&quot;, :offset 44, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn workers-routes [db]\n  [\&quot;/workers\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {:get\n            {:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n             :response (fn [ctx]\n                         (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n                                         (reduce (fn [r [k v]]\n                                                   (assoc r k {\&quot;$regex\&quot;   v\n                                                               \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n                           {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n             :consumes   #{\&quot;application/json\&quot; \&quot;application/x-www-form-urlencoded\&quot;}\n             :parameters {:body {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [worker (-&gt; (get-in ctx [:parameters :body])\n                                            (add-ns :worker))]\n                             (if-let [response (db.workers/create-worker db worker)]\n                               {:data (db.workers/workers-list db)}\n                               (assoc (:response ctx) :status 404))))}}})]\n    [[\&quot;/\&quot; :id] (yada/resource\n                 {:methods\n                  {:put\n                   {:produces   #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n                    :consumes   #{\&quot;application/json\&quot; \&quot;application/x-www-form-urlencoded\&quot;}\n                    :parameters {:path {:id schema/Str}\n                                 :body {schema/Any schema/Any}}\n                    :response   (fn [ctx]\n                                  (let [object-id (get-in ctx [:parameters :path :id])\n                                        worker (-&gt; (get-in ctx [:parameters :body])\n                                                   (add-ns :worker)\n                                                   (update :worker/address add-ns :address))]\n                                    (println (s/explain :worker/worker worker))\n                                    (if-let [response (db.workers/update-worker-by-id\n                                                        db object-id worker)]\n                                      {:data (db.workers/workers-list db)}\n                                      (assoc (:response ctx) :status 404))))}\n                   :delete\n                   {:produces   #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n                    :consumes   #{\&quot;application/json\&quot; \&quot;application/x-www-form-urlencoded\&quot;}\n                    :parameters {:path {:id schema/Str}}\n                    :response   (fn [ctx]\n                                  (let [id (get-in ctx [:parameters :path :id])]\n                                    (db.workers/remove-worker-by-id db id)\n                                    {:data (db.workers/workers-list db)}))}}})]\n    ]])&quot;, :offset 2846, :ns &quot;eckersdorf.routes.services.workers&quot;} {:command &quot;(defrecord nReplServer [config]\n  component/Lifecycle\n  (start [component]\n    (let [nrepl-port (:nrepl/port config)]\n      (timbre/info (str/format \&quot;Started nrepl-serwer on port %s\&quot; nrepl-port))\n      (assoc component :nrepl (when nrepl-port (nrepl/start-server :port nrepl-port)))))\n  (stop [component]\n    (let [nrepl (:nrepl component)]\n      (assoc component :nrepl (when nrepl (nrepl/stop-server nrepl))))))&quot;, :offset 413, :ns &quot;eckersdorf.nrepl&quot;} {:command &quot;(+ 1 1)&quot;, :offset 6, :ns &quot;eckersdorf.core&quot;} {:command &quot;(defmethod update-worker-by-id ObjectId [db ^ObjectId id worker]\n  {:pre  [(s/valid? :worker/worker worker)]\n   :post [(s/valid? :worker/worker %)]}\n  (when (mr/acknowledged? (mc/update-by-id db \&quot;workers\&quot; id {\&quot;$set\&quot; worker\n                                                            \&quot;$upsert\&quot; true}))\n    (find-worker-by-id db id)))&quot;, :offset 332, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(defmethod update-worker-by-id ObjectId [db ^ObjectId id worker]\n  {:pre  [(s/valid? :worker/worker worker)]\n   :post [(s/valid? :worker/worker %)]}\n  (when (mr/acknowledged? (mc/update-by-id db \&quot;workers\&quot; id {\&quot;$set\&quot; worker}\n                                           {\&quot;$upsert\&quot; true}))\n    (find-worker-by-id db id)))&quot;, :offset 317, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(db.workers/workers-list tmp-db)&quot;, :offset 32, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod update-worker-by-id ObjectId [db ^ObjectId id worker]\n  {:pre  [(s/valid? :worker/worker worker)]\n   :post [(s/valid? :worker/worker %)]}\n  (mc/save-and-return db \&quot;workers\&quot; worker))&quot;, :offset 192, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(swap! re-frame.db/app-db assoc :work-schedule/schedule {} )&quot;, :offset 60, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(db.work-schedule/reset-work-schedule-collection tmp-db)&quot;, :offset 56, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 8)})&quot;, :offset 205, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [datetime (get-in ctx [:parameters :query \&quot;datetime\&quot;])\n                               work (-&gt; (get-in ctx [:parameters :query])\n                                        (update \&quot;datetime\&quot; dtc/from-string)\n                                        (add-ns :work-schedule))]\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}\n            :delete\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :body])\n                                          (update :datetime dtc/from-string)\n                                          (add-ns :work-schedule))]\n                             (println work (get-in ctx [:parameters :body]))\n                             (db.work-schedule/remove-month db work)\n                             {:data {}}))}}})]\n    ]])&quot;, :offset 1966, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(reset-system)&quot;, :offset 14, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod update-worker-by-id ObjectId [db ^ObjectId id worker]\n  {:pre  [(s/valid? :worker/worker worker)]\n   :post [(s/valid? :worker/worker %)]}\n  (println worker)\n  (mc/save-and-return db \&quot;workers\&quot; worker))&quot;, :offset 211, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(defmethod update-worker-by-id ObjectId [db ^ObjectId id worker]\n  {:pre  [(s/valid? :worker/worker worker)]\n   :post [(s/valid? :worker/worker %)]}\n  (when (mr/acknowledged? (mc/update-by-id db \&quot;workers\&quot; id {\&quot;$set\&quot; worker}))\n    (find-worker-by-id db id)))&quot;, :offset 257, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(defmethod update-worker-by-id String [db ^String id worker]\n  (update-worker-by-id db (ObjectId. id) worker))&quot;, :offset 110, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(defmethod save-month [ObjectId DateTime]\n  [db works]\n  (let [{:keys [work-schedule/workplace-id\n                work-schedule/datetime] :as m} (first works)]\n    (println m)\n    (remove-month db m)\n    (mc/insert-batch db \&quot;work-schedule\&quot; works)))&quot;, :offset 248, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod save-month [ObjectId DateTime]\n  [db works]\n  (let [{:keys [work-schedule/workplace-id\n                work-schedule/datetime] :as m} (first works)]\n    (println m)\n    (println works)\n    (remove-month db m)\n    (mc/insert-batch db \&quot;work-schedule\&quot; works)))&quot;, :offset 268, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(mc/find-maps tmp-db \&quot;work-schedule\&quot;)&quot;, :offset 37, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.workplaces/workplaces-list tmp-db)&quot;, :offset 38, :ns &quot;eckersdorf.repl&quot;} {:command &quot;::a&quot;, :offset 3, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;(ns eckersdorf.specs.base\n  #?(:clj\n     (:require [clojure.spec.alpha :as s]\n               [clj-time.core :as t]\n               [cuerdas.core :as str]))\n  #?(:cljs\n     (:require [cljs.spec.alpha :as s]\n       [cljs-time.core :as t]\n       [cuerdas.core :as str]))\n  #?(:clj\n     (:import (org.joda.time DateTime)\n              (org.bson.types ObjectId)))\n  #?(:cljs\n     (:import (goog.date DateTime))))&quot;, :offset 406, :ns &quot;eckersdorf.core&quot;} {:command &quot;(str/numeric? \&quot;\&quot;)&quot;, :offset 17, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;(str/empty? false)&quot;, :offset 18, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;(str/empty? 1)&quot;, :offset 14, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;(comp not str/empty?)&quot;, :offset 21, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;((comp str/empty?) \&quot;\&quot;)&quot;, :offset 22, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;((comp not) \&quot;\&quot;)&quot;, :offset 15, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;((comp not str/empty?) \&quot;\&quot;)&quot;, :offset 26, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;((comp not str/empty?) \&quot;11\&quot;)&quot;, :offset 28, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;(ns eckersdorf.specs.address\n  (:require [clojure.spec.alpha :as s]))&quot;, :offset 69, :ns &quot;eckersdorf.core&quot;} {:command &quot;(s/def :string/phone-number (s/or :empty :string/empty\n                                  :number #(re-find #\&quot;^[0-9]{9}$\&quot; %)))&quot;, :offset 125, :ns &quot;eckersdorf.specs.base&quot;} {:command &quot;(ns eckersdorf.specs.workers\n  #?(:clj\n     (:require [clojure.spec.alpha :as s]))\n  #?(:cljs\n     (:require [cljs.spec.alpha :as s])))&quot;, :offset 135, :ns &quot;eckersdorf.core&quot;} {:command &quot;(nil? \&quot;\&quot;)&quot;, :offset 9, :ns &quot;eckersdorf.specs.workers&quot;} {:command &quot;(s/nilable nil)&quot;, :offset 15, :ns &quot;eckersdorf.specs.workers&quot;} {:command &quot;(ns eckersdorf.db.contacts\n  (:refer-clojure :exclude [update])\n  (:require [clojure.spec.alpha :as s]\n            [taoensso.timbre :as timbre]\n            [taoensso.encore :as encore]\n            [clj-time.core :as t]\n            [monger.core :as mg]\n            [monger.collection :as mc]\n            [monger.operators :refer :all]\n            [monger.query :as mq]\n            [monger.result :as mr]\n            [monger.internal.pagination :refer [offset-for]]\n            [cheshire.core :as json]\n            [cuerdas.core :as str]\n            [buddy.hashers :as hashers]\n            [buddy.sign.jwt :as jwt])\n  (:import (org.bson.types ObjectId)))&quot;, :offset 652, :ns &quot;eckersdorf.core&quot;} {:command &quot;(var-get 'monger.collection/insert-and-return)&quot;, :offset 46, :ns &quot;eckersdorf.db.contacts&quot;} {:command &quot;(var-get \&quot;monger.collection/insert-and-return\&quot;)&quot;, :offset 47, :ns &quot;eckersdorf.db.contacts&quot;} {:command &quot;(var-get #'monger.collection/insert-and-returnn)&quot;, :offset 48, :ns &quot;eckersdorf.db.contacts&quot;} {:command &quot;(var-get #'monger.collection/insert-and-return)&quot;, :offset 47, :ns &quot;eckersdorf.db.contacts&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [clojure.spec.alpha :as s]\n            [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [aero.core :as aero]\n            [taoensso.encore :as encore]\n            [taoensso.timbre :as timbre]\n            [monger.collection :as mc]\n            [eckersdorf.server :as server]\n            [eckersdorf.db.core :as db]\n            [eckersdorf.routes.core :as routes]\n            [eckersdorf.system :as system]\n            [eckersdorf.db.users :as users]\n            [eckersdorf.db.workers :as db.workers]\n            [eckersdorf.db.workplaces :as db.workplaces]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [cuerdas.core :as str]\n            [clojure.spec.alpha :as s]\n            [buddy.sign.jwt :as jwt]\n            [buddy.hashers :as hashers]\n            [clj-time.core :as t]\n            [progrock.core :as pr]\n            [clojure.zip :as zip]\n            [progrock.core :as pr]\n            [clojure.set :as set]\n            [clj-time.core :as dt]\n            [clj-time.coerce :as dtc])\n  (:import (org.bson.types ObjectId)))&quot;, :offset 1129, :ns &quot;eckersdorf.core&quot;} {:command &quot;(mc/find-one-as-map tmp-db \&quot;workers\&quot; {})&quot;, :offset 40, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/find-one-as-map tmp-db \&quot;workers\&quot; {:worker/last-name \&quot;sex\&quot;})&quot;, :offset 63, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn find-workers\n  ([db opts]\n   {:post [(s/valid? (s/* :worker/workers) %)]}\n   (mc/find-maps db \&quot;workers\&quot; opts))\n  ([db]\n   (find-workers db {})))&quot;, :offset 150, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(db.workers/find-workers tmp-db {:worker/email-address \&quot;a.szl\&quot;})&quot;, :offset 64, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/find-maps tmp-db \&quot;workers\&quot; {:worker/email-address {\&quot;$regex\&quot; \&quot;a.szl\&quot;}})&quot;, :offset 74, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :worker/worker (mc/find-maps tmp-db \&quot;workers\&quot; {:worker/email-address {\&quot;$regex\&quot; \&quot;a.szl\&quot;}}))&quot;, :offset 101, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :worker/worker (first (mc/find-maps tmp-db \&quot;workers\&quot; {:worker/email-address {\&quot;$regex\&quot; \&quot;a.szl\&quot;}})))&quot;, :offset 109, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn find-workers\n  ([db opts]\n   ;{:post [(s/valid? (s/* :worker/workers) %)]}\n   (mc/find-maps db \&quot;workers\&quot; opts))\n  ([db]\n   (find-workers db {})))&quot;, :offset 151, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(defn find-workers\n  ([db opts]\n   {:post [(s/valid? (s/* :worker/worker) %)]}\n   (mc/find-maps db \&quot;workers\&quot; opts))\n  ([db]\n   (find-workers db {})))&quot;, :offset 149, :ns &quot;eckersdorf.db.workers&quot;} {:command &quot;(db.workers/find-workers tmp-db {:worker/email-address {\&quot;$regex\&quot; \&quot;a.szl\&quot;}})&quot;, :offset 75, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [clojure.spec.alpha :as s]\n            [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [aero.core :as aero]\n            [taoensso.encore :as encore]\n            [taoensso.timbre :as timbre]\n            [monger.collection :as mc]\n            [eckersdorf.server :as server]\n            [eckersdorf.db.core :as db]\n            [eckersdorf.routes.core :as routes]\n            [eckersdorf.system :as system]\n            [eckersdorf.db.users :as users]\n            [eckersdorf.db.workers :as db.workers]\n            [eckersdorf.db.workplaces :as db.workplaces]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [cuerdas.core :as str]\n            [buddy.sign.jwt :as jwt]\n            [buddy.hashers :as hashers]\n            [clj-time.core :as t]\n            [progrock.core :as pr]\n            [clojure.zip :as zip]\n            [progrock.core :as pr]\n            [clojure.set :as set]\n            [clj-time.core :as dt]\n            [clj-time.coerce :as dtc])\n  (:import (org.bson.types ObjectId)))&quot;, :offset 1090, :ns &quot;eckersdorf.core&quot;} {:command &quot;(defn start-system []\n  (alter-var-root #'repl-system component/start-system)\n  (alter-var-root #'tmp-db (fn [_] (:db (:mongo repl-system)))))&quot;, :offset 142, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :workplace/object-id \&quot;sex\&quot;)&quot;, :offset 38, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [clojure.spec.alpha :as s]\n            [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [clojure.data.csv :as csv]\n            [aero.core :as aero]\n            [taoensso.encore :as encore]\n            [taoensso.timbre :as timbre]\n            [monger.collection :as mc]\n            [eckersdorf.server :as server]\n            [eckersdorf.db.core :as db]\n            [eckersdorf.routes.core :as routes]\n            [eckersdorf.system :as system]\n            [eckersdorf.db.users :as users]\n            [eckersdorf.db.workers :as db.workers]\n            [eckersdorf.db.workplaces :as db.workplaces]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [cuerdas.core :as str]\n            [buddy.sign.jwt :as jwt]\n            [buddy.hashers :as hashers]\n            [clj-time.core :as t]\n            [progrock.core :as pr]\n            [clojure.zip :as zip]\n            [progrock.core :as pr]\n            [clojure.set :as set]\n            [clj-time.core :as dt]\n            [clj-time.coerce :as dtc])\n  (:import (org.bson.types ObjectId)))&quot;, :offset 1129, :ns &quot;eckersdorf.core&quot;} {:command &quot;(timbre/merge-config! {:level :info})&quot;, :offset 37, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(def repl-system nil)&quot;, :offset 21, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(def tmp-db nil)&quot;, :offset 16, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn init-system []\n  (alter-var-root #'repl-system (constantly (system/new-system))))&quot;, :offset 87, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn \n  start-system []\n  (alter-var-root #'repl-system component/start-system)\n  (alter-var-root #'tmp-db (fn [_] (:db (:mongo repl-system)))))&quot;, :offset 145, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn stop-system []\n  (alter-var-root #'repl-system\n                  (fn [s] (when s (component/stop-system s)))))&quot;, :offset 116, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn go-system []\n  (init-system)\n  (start-system))&quot;, :offset 52, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn reset-system []\n  (stop-system)\n  (init-system)\n  (start-system))&quot;, :offset 71, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(go-system)&quot;, :offset 11, :ns &quot;eckersdorf.repl&quot;}], :remote [{:command &quot;(defn worker-working-hours [schedule worker-id day]\n  (println worker-id)\n  (-&gt;&gt; schedule\n       (filter #(and (= day (dt/day (:work-schedule/datetime %)))\n                     (= worker-id (:work-schedule/worker-id %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (first)\n       :work-schedule/datetime\n       (println)\n       ;((juxt #(-&gt;&gt; % first :work-schedule/datetime dt/hour)\n       ;       #(-&gt;&gt; % last :work-schedule/datetime dt/hour)\n       ;       #(-&gt;&gt; % first :work-schedule/work-type)))\n       ))&quot;, :offset 563, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [schedule worker-id day]\n  (println worker-id)\n  (-&gt;&gt; schedule\n       (filter #(and (= day (dt/day (:work-schedule/datetime %)))\n                     (= worker-id (:work-schedule/worker-id %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (first)\n       (println \&quot;sex \&quot;)\n       ;((juxt #(-&gt;&gt; % first :work-schedule/datetime dt/hour)\n       ;       #(-&gt;&gt; % last :work-schedule/datetime dt/hour)\n       ;       #(-&gt;&gt; % first :work-schedule/work-type)))\n       ))&quot;, :offset 539, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [schedule worker-id day]\n  (println worker-id)\n  (-&gt;&gt; schedule\n       (filter #(and (= day (dt/day (:work-schedule/datetime %)))\n                     (= worker-id (:work-schedule/worker-id %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       (println \&quot;sex \&quot;)\n       ;((juxt #(-&gt;&gt; % first :work-schedule/datetime dt/hour)\n       ;       #(-&gt;&gt; % last :work-schedule/datetime dt/hour)\n       ;       #(-&gt;&gt; % first :work-schedule/work-type)))\n       ))&quot;, :offset 545, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [schedule worker-id day]\n  (println worker-id)\n  (-&gt;&gt; schedule\n       (filter #(and (= day (dt/day (:work-schedule/datetime %)))\n                     (= worker-id (:work-schedule/worker-id %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))\n       ))&quot;, :offset 605, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(rf/subscribe [:workers/list])&quot;, :offset 30, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/print-data-source\n  (fn [db _]\n    (let [datetime (reaction (:work-schedule/main-date @db))\n          schedule (reaction (:work-schedule/schedule @db))\n          workplace-id (reaction (:work-schedule/selected-workplace-id @db))\n          all-workers (reaction (:workers/list @db))\n          workers (reaction (workers.utils/workers-by-id @all-workers @workplace-id))\n          begin-time (dt/first-day-of-the-month @datetime)\n          end-time (dt/plus (dt/last-day-of-the-month begin-time) (dt/days 1))]\n      (reaction\n        (flatten\n          (mapv (fn [datetime]\n                  (mapv (fn [{:keys [mongo/object-id] :as worker}]\n                          (let [[begin end work-type] (utils/worker-working-hours @schedule object-id (dt/day datetime))]\n                            {:datetime datetime\n                             object-id [begin end work-type]}))\n                        @workers))\n                (dtp/periodic-seq begin-time end-time (dt/days 1))))))))&quot;, :offset 1012, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(dtf/formatters)&quot;, :offset 16, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;dtf/formatters&quot;, :offset 14, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(dtf/unparse (dt/now) (:date dtf/formatters))&quot;, :offset 45, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(dtf/unparse (dt/now))&quot;, :offset 22, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(dtf/unparse (:date dtf/formatters) (dt/now))&quot;, :offset 45, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(get long-weekdays (dt/day-of-week (dt/now)))&quot;, :offset 45, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(defn worker-working-hours [schedule worker-id day]\n  (-&gt;&gt; schedule\n       (filter #(and (= day (dt/day (:work-schedule/datetime %)))\n                     (= worker-id (:work-schedule/worker-id %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 575, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/print-data-source\n  (fn [db _]\n    (let [datetime (reaction (:work-schedule/main-date @db))\n          schedule (reaction (:work-schedule/schedule @db))\n          workplace-id (reaction (:work-schedule/selected-workplace-id @db))\n          all-workers (reaction (:workers/list @db))\n          workers (reaction (workers.utils/workers-by-id @all-workers @workplace-id))\n          begin-time (dt/first-day-of-the-month @datetime)\n          end-time (dt/plus (dt/last-day-of-the-month begin-time) (dt/days 1))]\n      (reaction\n        (flatten\n          (mapv (fn [datetime]\n                  (reduce merge (mapv (fn [{:keys [mongo/object-id] :as worker}]\n                                        (let [[begin end work-type] (utils/worker-working-hours @schedule object-id (dt/day datetime))]\n                                          {:datetime datetime\n                                           object-id [begin end work-type]}))\n                                      @workers)))\n                (dtp/periodic-seq begin-time end-time (dt/days 1))))))))&quot;, :offset 1083, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(case 1\n  #{1 2} \&quot;sex\&quot;)&quot;, :offset 23, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(cond 1\n  #{1 2} \&quot;sex\&quot;)&quot;, :offset 23, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(cond \n  #{1 2} \&quot;sex\&quot;)&quot;, :offset 22, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(condp =  \n  #{1 2} \&quot;sex\&quot;)&quot;, :offset 26, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(condp = 1\n  #{1 2} \&quot;sex\&quot;)&quot;, :offset 26, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(dt/first-day-of-the-month (dt/now))&quot;, :offset 36, :ns &quot;eckersdorf.work-schedule.db&quot;} {:command &quot;(js/moment)&quot;, :offset 11, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.startOf (js/moment) \&quot;day\&quot;)&quot;, :offset 28, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.endOf (js/moment) \&quot;day\&quot;)&quot;, :offset 26, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.toISOString (.endOf (js/moment) \&quot;day\&quot;))&quot;, :offset 41, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.toString (.endOf (js/moment) \&quot;day\&quot;))&quot;, :offset 38, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(dtc/from-string (.toString (.endOf (js/moment) \&quot;day\&quot;)))&quot;, :offset 56, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.UTC (js/moment) \&quot;day\&quot;)&quot;, :offset 24, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.utc (js/moment) \&quot;day\&quot;)&quot;, :offset 24, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(.toISOString (.utc (js/moment) \&quot;day\&quot;))&quot;, :offset 39, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/get-work\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/workplace-id\n                     work-schedule/datetime]}]]\n    (reaction (-&gt;&gt; (get-in @db [:work-schedule/schedule worker-id])\n                   (filter #(dt/equal? datetime (:work-schedule/datetime %)))))))&quot;, :offset 332, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/get-work {:work-schedule/worker-id \&quot;59fbac27fe1b236d0a7208b3\&quot;}])&quot;, :offset 94, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/get-work {:work-schedule/worker-id \&quot;59fbac27fe1b236d0a7208b3\&quot;\n                                        :work-schedule/datetime (dt/now)}])&quot;, :offset 167, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-event-fx\n  :work-schedule/set-holiday\n  (fn [{db :db} [_ workplace-id workers datetime]]\n    (let [zero-time (dt/minus datetime (dt/hours (dt/hour datetime)))\n          works (mapv (fn [{:keys [mongo/object-id]}]\n                        {object-id (mapv (fn [datetime]\n                                           {:work-schedule/workplace-id workplace-id\n                                            :work-schedule/worker-id    object-id\n                                            :work-schedule/datetime     datetime\n                                            :work-schedule/work-type    \&quot;holiday\&quot;})\n                                         (dtp/periodic-seq (dt/plus zero-time (dt/hours 6))\n                                                           (dt/plus zero-time (dt/hours 21))\n                                                           (dt/hours 1)))})\n                      workers)]\n      {:db         (-&gt; db\n                       (reduce (fn [r w]\n                                 (println w)\n                                 (utils/remove-multiple-work r w))\n                               (vals works))\n                       (reduce (fn [r w]\n                                 (let [worker-id (-&gt; w (first) :work-schedule/worker-id)]\n                                   (assoc-in db [:work-schedule/schedule worker-id] w)))\n                               (vals works)))\n       :dispatch-n [[:work-schedule/calculate-hours-worked-in-month]\n                    [:work-schedule/calculate-days-worked-in-month]\n                    [:work-schedule/calculate-saturdays-worked-in-month]\n                    [:work-schedule/calculate-sundays-worked-in-month]\n                    [:work-schedule/calculate-first-changes-worked-in-month]\n                    [:work-schedule/calculate-second-changes-worked-in-month]\n                    [:work-schedule/set-edited]]})))&quot;, :offset 1880, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(map (fn [x] {x :a}) (range 10))&quot;, :offset 32, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(mapcat (fn [x] {x :a}) (range 10))&quot;, :offset 35, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-event-fx\n  :work-schedule/set-holiday\n  (fn [{db :db} [_ workplace-id workers datetime]]\n    (let [zero-time (dt/minus datetime (dt/hours (dt/hour datetime)))\n          works (reduce (fn [m {:keys [mongo/object-id]}]\n                          (assoc m object-id\n                                   (mapv (fn [datetime]\n                                           {:work-schedule/workplace-id workplace-id\n                                            :work-schedule/worker-id    object-id\n                                            :work-schedule/datetime     datetime\n                                            :work-schedule/work-type    \&quot;holiday\&quot;})\n                                         (dtp/periodic-seq (dt/plus zero-time (dt/hours 6))\n                                                           (dt/plus zero-time (dt/hours 21))\n                                                           (dt/hours 1)))))\n                        {} workers)\n          _ (println \&quot;blabla\&quot; workers (vals works))]\n      {\n       ;:db         (as-&gt; db $\n       ;                  (reduce (fn [r w]\n       ;                            (utils/remove-multiple-work r w))\n       ;                          $ (vals works))\n       ;                  (reduce (fn [r w]\n       ;                            (let [worker-id (-&gt; w (first) :work-schedule/worker-id)]\n       ;                              (assoc-in db [:work-schedule/schedule worker-id] w)))\n       ;                          $ (vals works)))\n       ;:dispatch-n [[:work-schedule/calculate-hours-worked-in-month]\n       ;             [:work-schedule/calculate-days-worked-in-month]\n       ;             [:work-schedule/calculate-saturdays-worked-in-month]\n       ;             [:work-schedule/calculate-sundays-worked-in-month]\n       ;             [:work-schedule/calculate-first-changes-worked-in-month]\n       ;             [:work-schedule/calculate-second-changes-worked-in-month]\n       ;             [:work-schedule/set-edited]]\n       })))&quot;, :offset 1994, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/is-holiday?\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/workplace-id\n                     work-schedule/datetime]}]]\n    (let [works (reaction (get-in @db [:work-schedule/schedule worker-id]))]\n      (reaction (-&gt;&gt; @works\n                     (filter (fn [m] (dt/equal? (dt/plus (dt/minus datetime (dt/hours (dt/hour datetime))) (dt/hours 6))\n                                                (:work-schedule/datetime m))))\n                     (first)\n                     :work-schedule/work-type\n                     (= \&quot;holiday\&quot;))))))&quot;, :offset 605, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/is-holiday?\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/workplace-id\n                     work-schedule/datetime]}]]\n    (let [works (reaction (get-in @db [:work-schedule/schedule worker-id]))]\n      (println works)\n      (reaction (-&gt;&gt; @works\n                     (filter (fn [m] (dt/equal? (dt/plus (dt/minus datetime (dt/hours (dt/hour datetime))) (dt/hours 6))\n                                                (:work-schedule/datetime m))))\n                     (first)\n                     :work-schedule/work-type\n                     (= \&quot;holiday\&quot;))))))&quot;, :offset 627, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(get {:a {:b []\n      :c []}}\n     :a)&quot;, :offset 38, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(first (get {:a {:b []\n           :c []}}\n      :a))&quot;, :offset 52, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(vals (first (get {:a {:b []\n                  :c []}}\n             :a)))&quot;, :offset 73, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(first (get {:a {:b []\n                 :c []}}\n            :a))&quot;, :offset 64, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(:b (first (get {:a {:b []\n                  :c []}}\n             :a)))&quot;, :offset 71, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(:b (get {:a {:b []\n              :c []}}\n         :a))&quot;, :offset 55, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(get {:a {:b []\n          :c []}}\n     :a)&quot;, :offset 42, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(vals (get {:a {:b []\n           :c []}}\n      :a))&quot;, :offset 51, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(defn work-schedule-app []\n  (let [main-date (rf/subscribe [:work-schedule/main-date])\n        days (rf/subscribe [:work-schedule/days])\n        workplace-id (rf/subscribe [:work-schedule/selected-workplace-id])\n        workers (reaction @(rf/subscribe [:workers/by-workplace-id @workplace-id]))]\n    (fn []\n      [flex/vbox {:height \&quot;100%\&quot;}\n       [flex/hbox {:class           \&quot;no-print\&quot;\n                   :justify-content :center}\n        [select-workplace]\n        [select-month]\n        [ant/button-group\n         [reload-button]\n         [sync-button]\n         [print-button]]]\n       (if-not @workplace-id\n         [flex/hbox {:size            1\n                     :justify-content :center\n                     :align-items     :center}\n          [:h1 \&quot;proszę wybrać sklep\&quot;]]\n         [flex/hbox {:height \&quot;100%\&quot;}\n          [flex/vbox {:size   \&quot;14 0 0\&quot;\n                      :height \&quot;100%\&quot;\n                      :style  {:overflow-y    :scroll\n                               :padding-right \&quot;24px\&quot;}}\n           (doall (for [date @days\n                        :let [weekday (dt/day-of-week date)\n                              weekday-name (get long-weekdays weekday)]]\n                    ^{:key (str date)}\n                    [flex/vbox\n                     [flex/hbox\n                      [flex/hbox {:size            4\n                                  :justify-content :space-between\n                                  :align-items     :center\n                                  :style           {:margin-right \&quot;1px\&quot;}}\n                       [:h4 (str (dtf/unparse (dtf/formatter \&quot;yyyy-MM-dd\&quot;) date) \&quot; \&quot; weekday-name)]\n                       [ant/tooltip {:title             \&quot;święto\&quot;\n                                     :placement         :right\n                                     :mouse-enter-delay 0.25}\n                        [ant/icon {:type     :dingding\n                                   :on-click (fn []\n                                               (let [holiday? (rf/subscribe [:work-schedule/is-holiday? {:work-schedule/workplace-id @workplace-id\n                                                                                                         :work-schedule/datetime     date}])]\n                                                 (println :holiday @holiday?)\n                                                 (if-not @holiday?\n                                                   (rf/dispatch [:work-schedule/set-holiday @workplace-id @workers date])\n                                                   (rf/dispatch [:work-schedule/remove-holiday @workplace-id @workers date]))))\n                                   :style    {:cursor  :pointer\n                                              :padding \&quot;0px 4px\&quot;}}]]]\n                      (doall (for [hour (range 6 21)]\n                               ^{:key hour}\n                               [flex/box {:size            1\n                                          :justify-content :center\n                                          :style           {:border     \&quot;1px solid #d9d9d9\&quot;\n                                                            :text-align :center}}\n                                (str hour \&quot;:00\&quot;)]))]\n                     (doall (for [{:keys [mongo/object-id\n                                          worker/first-name\n                                          worker/last-name\n                                          worker/working-hours]} @workers]\n                              ^{:key object-id}\n                              [flex/hbox\n                               [flex/hbox {:size  4\n                                           :style {:border \&quot;1px solid #d9d9d9\&quot;}}\n                                [flex/hbox {:size            1\n                                            :justify-content :space-between\n                                            :align-items     :center}\n                                 [:div (str first-name \&quot; \&quot; last-name)]\n                                 [flex/hbox\n                                  [ant/tooltip {:title             \&quot;wyślij na urlop\&quot;\n                                                :placement         :left\n                                                :mouse-enter-delay 0.25}\n                                   [ant/icon {:type     :tag\n                                              :on-click (fn []\n\n                                                          (let [holiday? (rf/subscribe [:work-schedule/is-holiday? {:work-schedule/workplace-id @workplace-id\n                                                                                                                    :work-schedule/datetime     date}])\n                                                                vacation? (rf/subscribe [:work-schedule/is-vacation? {:work-schedule/workplace-id @workplace-id\n                                                                                                                      :work-schedule/worker-id    object-id\n                                                                                                                      :work-schedule/datetime     date}])]\n                                                            (when-not @holiday?\n                                                              (if-not @vacation?\n                                                                (rf/dispatch [:work-schedule/set-vacation\n                                                                              {:work-schedule/workplace-id @workplace-id\n                                                                               :work-schedule/worker-id    object-id\n                                                                               :work-schedule/datetime     date}])\n                                                                (rf/dispatch [:work-schedule/clear-day\n                                                                              {:work-schedule/workplace-id @workplace-id\n                                                                               :work-schedule/worker-id    object-id\n                                                                               :work-schedule/datetime     date}])))))\n                                              :style    {:cursor        :pointer\n                                                         :padding-right \&quot;4px\&quot;}}]]\n                                  [ant/tooltip {:title             \&quot;wyczyść dzień\&quot;\n                                                :placement         :right\n                                                :mouse-enter-delay 0.25}\n                                   [ant/icon {:type     :delete\n                                              :on-click (fn []\n                                                          (let [holiday? (rf/subscribe [:work-schedule/is-holiday? {:work-schedule/workplace-id @workplace-id\n                                                                                                                    :work-schedule/datetime     date}])]\n                                                            (when-not @holiday?\n                                                              (rf/dispatch [:work-schedule/clear-day\n                                                                            {:work-schedule/workplace-id @workplace-id\n                                                                             :work-schedule/worker-id    object-id\n                                                                             :work-schedule/datetime     date}]))))\n                                              :style    {:cursor        :pointer\n                                                         :padding-right \&quot;4px\&quot;}}]]]]]\n                               (doall (for [hour (range 6 21)\n                                            :let [datetime (dt/plus date (dt/hours hour))]]\n                                        ^{:key hour}\n                                        [work-cell {:work-schedule/workplace-id @workplace-id\n                                                    :work-schedule/worker-id    object-id\n                                                    :work-schedule/datetime     datetime}]))]))\n                     [:br]]))]\n          ;[flex/vbox {:class \&quot;no-print\&quot;\n          ;            :size  \&quot;3 0 auto\&quot;\n          ;            :style {:padding \&quot;0px 12px\&quot;}}\n          ; [flex/hbox {:justify-content :space-between\n          ;             :align-items     :center}\n          ;  [flex/box {:size 3} \&quot;osoba\&quot;]\n          ;  [flex/box {:size 1}\n          ;   [ant/tooltip {:title \&quot;liczba godzin\&quot;} [:div {:style {:cursor :pointer}} \&quot;g\&quot;]]]\n          ;  [flex/box {:size 1}\n          ;   [ant/tooltip {:title \&quot;liczba pierwszych zmian\&quot;} [:div {:style {:cursor :pointer}} \&quot;p\&quot;]]]\n          ;  [flex/box {:size 1}\n          ;   [ant/tooltip {:title \&quot;liczba drugich zmian\&quot;} [:div {:style {:cursor :pointer}} \&quot;d\&quot;]]]\n          ;  [flex/box {:size 1}\n          ;   [ant/tooltip {:title \&quot;liczba sobót\&quot;} [:div {:style {:cursor :pointer}} \&quot;s\&quot;]]]\n          ;  [flex/box {:size 1}\n          ;   [ant/tooltip {:title \&quot;liczba niedziel\&quot;} [:div {:style {:cursor :pointer}} \&quot;n\&quot;]]]]\n          ; (doall (for [{:keys [mongo/object-id\n          ;                      worker/first-name\n          ;                      worker/last-name\n          ;                      worker/working-hours]} @workers]\n          ;          ^{:key object-id}\n          ;          [flex/hbox {:justify-content :space-between\n          ;                      :align-items     :center}\n          ;           [flex/box {:size 3}\n          ;            (str (first first-name) \&quot;. \&quot; last-name)]\n          ;           [flex/box {:size 1}\n          ;            [worked-hours {:work-schedule/worker-id    object-id\n          ;                           :work-schedule/workplace-id @workplace-id\n          ;                           :work-schedule/datetime     @main-date}]]\n          ;           [flex/box {:size 1}\n          ;            [worked-first-changes {:work-schedule/worker-id    object-id\n          ;                                   :work-schedule/workplace-id @workplace-id\n          ;                                   :work-schedule/datetime     @main-date}]]\n          ;           [flex/box {:size 1}\n          ;            [worked-second-changes {:work-schedule/worker-id    object-id\n          ;                                    :work-schedule/workplace-id @workplace-id\n          ;                                    :work-schedule/datetime     @main-date}]]\n          ;           [flex/box {:size 1}\n          ;            [worked-saturdays {:work-schedule/worker-id    object-id\n          ;                               :work-schedule/workplace-id @workplace-id\n          ;                               :work-schedule/datetime     @main-date}]]\n          ;           [flex/box {:size 1}\n          ;            [worked-sundays {:work-schedule/worker-id    object-id\n          ;                             :work-schedule/workplace-id @workplace-id\n          ;                             :work-schedule/datetime     @main-date}]]]))]\n          ])])))&quot;, :offset 11154, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;@(rf/subscribe [:work-schedule/schedule])&quot;, :offset 41, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(vals @(rf/subscribe [:work-schedule/schedule]))&quot;, :offset 48, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(flatten (vals @(rf/subscribe [:work-schedule/schedule])))&quot;, :offset 58, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(empty? {})&quot;, :offset 11, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;{12345 {:datetime (dtc/to-string (dt/now))}}&quot;, :offset 44, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;{1 {:datetime (dtc/to-string (dt/now))}\n 2 {:datetime (dtc/to-string (dt/now))}}&quot;, :offset 80, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(map (fn [[k v]]\n       (println k)) {1 {:datetime (dtc/to-string (dt/now))}\n                   2 {:datetime (dtc/to-string (dt/now))}})&quot;, :offset 136, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(reduce (fn [r [k v]]\n          (println k))\n        {} {1 {:datetime (dtc/to-string (dt/now))}\n            2 {:datetime (dtc/to-string (dt/now))}})&quot;, :offset 148, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(reduce (fn [r [k v]]\n          (assoc r k (update v :datetime dtc/from-string)))\n        {} {1 {:datetime (dtc/to-string (dt/now))}\n            2 {:datetime (dtc/to-string (dt/now))}})&quot;, :offset 185, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(reduce (fn [r [k v]]\n          (assoc r k\n                   (map (fn [m] (update m :datetime dtc/from-string))\n                        v)))\n        {} {1 [{:datetime (dtc/to-string (dt/now))}\n               {:datetime (dtc/to-string (dt/now))}]})&quot;, :offset 248, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-event-fx\n  :work-schedule/ajax.post-work-schedule-success\n  (fn [{db :db} [_ {:keys [data]}]]\n    (.log js/console data)\n    {:db       (assoc db :work-schedule/schedule\n                         (reduce (fn [r [k v]]\n                                   (assoc r k\n                                            (map (fn [m] (update m :work-schedule/datetime dtc/from-string)))))\n                                 {} data))\n     :dispatch [:work-schedule/unset-edited]\n     :message  {:content  \&quot;poprawnie zapisano harmonogram pracy\&quot;\n                :type     :success\n                :duration 1.5}}))&quot;, :offset 604, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(swap! re-frame.db/app-db :work-schedule/schedule {})&quot;, :offset 53, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/subscribe [:work-schedule/schedule])&quot;, :offset 40, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(swap! re-frame.db/app-db assoc :work-schedule/schedule {})&quot;, :offset 59, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-event-db\n  :work-schedule/calculate-first-changes-worked-in-month\n  (fn [db [_ {:keys [work-schedule/worker-id]}]]\n    (let [calculate-fn (fn [db worker-id]\n                         (-&gt;&gt; (get-in db [:work-schedule/schedule worker-id])\n                              (filter #(and (#{\&quot;seller\&quot; \&quot;butcher\&quot;} (:work-schedule/work-type %))\n                                            (and (do (println (dt/hour (:work-schedule/datetime %)))\n                                                     true))\n                                            (= 6 (dt/hour (:work-schedule/datetime %)))))\n                              (map (fn [{:keys [work-schedule/datetime]}] (dt/day datetime)))\n                              (distinct)\n                              (count)))]\n      (if worker-id\n        (assoc-in db [:work-schedule/stats worker-id :first-changes-worked-in-month] (calculate-fn db worker-id))\n        (let [workers (workers.utils/workers-by-id (:workers/list db) (:work-schedule/selected-workplace-id db))]\n          (reduce (fn [db {:keys [mongo/object-id]}]\n                    (assoc-in db [:work-schedule/stats object-id :first-changes-worked-in-month] (calculate-fn db object-id)))\n                  db workers))))))&quot;, :offset 1229, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(get-in @re-frame.db/app-db [:work-schedule/stats])&quot;, :offset 51, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(get-in @re-frame.db/app-db [:work-schedule/stats \&quot;59fbac27fe1b236d0a7208b3\&quot;])&quot;, :offset 78, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(defn worked-hours [work]\n  (let [working-days (rf/subscribe [:work-schedule/calculate-all-working-days-in-month])\n        worked-hours (rf/subscribe [:work-schedule/hours-worked-in-month work])]\n    (fn [work]\n      [:div (+ (* working-days -8) @worked-hours)])))&quot;, :offset 264, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(rf/subscribe [:work-schedule/calculate-all-working-days-in-month])&quot;, :offset 67, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(let [db @re-frame.db/app-db\n      works (first (vals (:work-schedule/schedule db)))]\n  (-&gt;&gt; works\n       (filter (fn [work]\n                 (= \&quot;holiday\&quot; (:work-schedule/work-type work))))\n       (map #(dt/day (:work-schedule/datetime %)))\n       (distinct)\n       (count)))&quot;, :offset 275, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/print-data-source\n  (fn [db _]\n    (let [datetime (reaction (:work-schedule/main-date @db))\n          schedule (reaction (:work-schedule/schedule @db))\n          workplace-id (reaction (:work-schedule/selected-workplace-id @db))\n          all-workers (reaction (:workers/list @db))\n          workers (reaction (workers.utils/workers-by-id @all-workers @workplace-id))\n          begin-time (dt/first-day-of-the-month @datetime)\n          end-time (dt/plus (dt/last-day-of-the-month begin-time) (dt/days 1))]\n      (reaction\n        (flatten\n          (mapv (fn [datetime]\n                  (reduce merge (mapv (fn [{:keys [mongo/object-id] :as worker}]\n                                        (let [[begin end work-type] (utils/worker-working-hours (get @schedule object-id) (dt/day datetime))]\n                                          (println object-id (utils/worker-working-hours (get @schedule object-id) (dt/day datetime)))\n                                          {:datetime datetime\n                                           object-id [begin end work-type]}))\n                                      @workers)))\n                (dtp/periodic-seq begin-time end-time (dt/days 1))))))))&quot;, :offset 1224, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/print-data-source])&quot;, :offset 49, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/print-data-source\n  (fn [db _]\n    (let [datetime (reaction (:work-schedule/main-date @db))\n          schedule (reaction (:work-schedule/schedule @db))\n          workplace-id (reaction (:work-schedule/selected-workplace-id @db))\n          all-workers (reaction (:workers/list @db))\n          workers (reaction (workers.utils/workers-by-id @all-workers @workplace-id))\n          begin-time (dt/first-day-of-the-month @datetime)\n          end-time (dt/plus (dt/last-day-of-the-month begin-time) (dt/days 1))]\n      (reaction\n        (flatten\n          (mapv (fn [datetime]\n                  (reduce merge (mapv (fn [{:keys [mongo/object-id] :as worker}]\n                                        (let [[begin end work-type] (utils/worker-working-hours (get @schedule object-id) (dt/day datetime))]\n                                          (println object-id (get @schedule object-id) (utils/worker-working-hours (get @schedule object-id) (dt/day datetime)))\n                                          {:datetime datetime\n                                           object-id [begin end work-type]}))\n                                      @workers)))\n                (dtp/periodic-seq begin-time end-time (dt/days 1))))))))&quot;, :offset 1250, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/print-data-source\n  (fn [db _]\n    (let [datetime (reaction (:work-schedule/main-date @db))\n          schedule (reaction (:work-schedule/schedule @db))\n          workplace-id (reaction (:work-schedule/selected-workplace-id @db))\n          all-workers (reaction (:workers/list @db))\n          workers (reaction (workers.utils/workers-by-id @all-workers @workplace-id))\n          begin-time (dt/first-day-of-the-month @datetime)\n          end-time (dt/plus (dt/last-day-of-the-month begin-time) (dt/days 1))]\n      (reaction\n        (flatten\n          (mapv (fn [datetime]\n                  (reduce merge (mapv (fn [{:keys [mongo/object-id] :as worker}]\n                                        (let [[begin end work-type] (utils/worker-working-hours (get @schedule object-id) (dt/day datetime))]\n                                          (println object-id (get @schedule object-id))\n                                          {:datetime datetime\n                                           object-id [begin end work-type]}))\n                                      @workers)))\n                (dtp/periodic-seq begin-time end-time (dt/days 1))))))))&quot;, :offset 1177, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(defn worker-working-hours [works day]\n  (println (-&gt;&gt; works))\n  (-&gt;&gt; works\n       (filter #(= day (dt/day (:work-schedule/datetime %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 513, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [works day]\n  (println (-&gt;&gt; works (map #(dt/day (:work-schedule/datetime %)))))\n  (-&gt;&gt; works\n       (filter #(= day (dt/day (:work-schedule/datetime %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 557, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [works day]\n  (println (-&gt;&gt; works (filter #(= day (dt/day (:work-schedule/datetime %))))))\n  (-&gt;&gt; works\n       (filter #(= day (dt/day (:work-schedule/datetime %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 568, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [works day]\n  (println (-&gt;&gt; works \n                (filter #(= day (dt/day (:work-schedule/datetime %))))\n                (sort-by :work-schedule/datetime\n                         (fn [d1 d2] (dt/before? d1 d2)))\n                (remove nil?)))\n  (-&gt;&gt; works\n       (filter #(= day (dt/day (:work-schedule/datetime %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 722, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [works day]\n  (println (-&gt;&gt; works \n                (filter #(= day (dt/day (:work-schedule/datetime %))))\n                (sort-by :work-schedule/datetime\n                         (fn [d1 d2] (dt/before? d1 d2)))\n                (remove empty?)))\n  (-&gt;&gt; works\n       (filter #(= day (dt/day (:work-schedule/datetime %))))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       (remove nil?)\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 724, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(empty? nil)&quot;, :offset 12, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(empty? [[]])&quot;, :offset 13, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(defn worker-working-hours [works day]\n  (println (-&gt;&gt; works \n                (filter #(= day (dt/day (:work-schedule/datetime %))))\n                (remove #(or (empty? %) (nil? %)))\n                (sort-by :work-schedule/datetime\n                         (fn [d1 d2] (dt/before? d1 d2)))))\n  (-&gt;&gt; works\n       (filter #(= day (dt/day (:work-schedule/datetime %))))\n       (remove #(or (empty? %) (nil? %)))\n       (sort-by :work-schedule/datetime\n                (fn [d1 d2] (dt/before? d1 d2)))\n       ((juxt #(-&gt; % first :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % last :work-schedule/datetime ((fn [datetime] (when datetime (dt/hour datetime)))))\n              #(-&gt; % first :work-schedule/work-type)))))&quot;, :offset 764, :ns &quot;eckersdorf.work-schedule.utils&quot;} {:command &quot;(rf/clear-subscription-cache!)&quot;, :offset 30, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/print-data-source])&quot;, :offset 50, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [re-frame.core :as rf]\n            [re-frame.db :refer [app-db]]))&quot;, :offset 98, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(ns eckersdorf.core\n  (:require [eckersdorf.specs.base]\n            [eckersdorf.specs.address]\n            [eckersdorf.specs.contacts]\n            [eckersdorf.specs.users]\n            [eckersdorf.specs.workplaces]\n            [eckersdorf.specs.workers]\n            [eckersdorf.specs.work-schedule]\n\n            [goog.events :as events]\n            [goog.history.EventType :as HistoryEventType]\n            [reagent.core :as r]\n            [re-frame.core :as rf]\n            [bidi.bidi :as bidi]\n            [bidi.router :as br]\n            [taoensso.timbre :as timbre]\n            [ajax.core :refer [GET POST]]\n            [pushy.core :as pushy]\n            [eckersdorf.view.ui :as view]\n            [eckersdorf.routes.core :as routes]\n            [eckersdorf.init])\n  (:import goog.History))&quot;, :offset 792, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/def :workplace/object-id :mongo/object-id)&quot;, :offset 45, :ns &quot;eckersdorf.specs.workplaces&quot;} {:command &quot;(ns eckersdorf.init\n  (:require [taoensso.timbre :as timbre]\n            [day8.re-frame.http-fx]\n            [eckersdorf.specs.base]\n            [eckersdorf.specs.address]\n            [eckersdorf.specs.contacts]\n            [eckersdorf.specs.users]\n            [eckersdorf.specs.workplaces]\n            [eckersdorf.specs.workers]\n            [eckersdorf.specs.work-schedule]\n            [eckersdorf.events]\n            [eckersdorf.routes.events]\n            [eckersdorf.db.events]\n            [eckersdorf.window.db]\n            [eckersdorf.window.subs]\n            [eckersdorf.window.events]\n            [eckersdorf.process.db]\n            [eckersdorf.process.events]\n            [eckersdorf.process.subs]\n            [eckersdorf.error.db]\n            [eckersdorf.error.events]\n            [eckersdorf.error.subs]\n            [eckersdorf.view.events]\n            [eckersdorf.view.subs]\n            [eckersdorf.user.db]\n            [eckersdorf.user.events]\n            [eckersdorf.user.subs]\n            [eckersdorf.user.login.db]\n            [eckersdorf.user.login.events]\n            [eckersdorf.user.login.subs]\n            [eckersdorf.workplaces.db]\n            [eckersdorf.workplaces.events]\n            [eckersdorf.workplaces.subs]\n            [eckersdorf.workers.db]\n            [eckersdorf.workers.events]\n            [eckersdorf.workers.subs]\n            [eckersdorf.work-schedule.db]\n            [eckersdorf.work-schedule.events]\n            [eckersdorf.work-schedule.subs]\n\n\n            [re-frame.router :as router]\n            [re-frame.registrar :refer [get-handler clear-handlers register-handler]]\n            [re-frame.loggers :refer [console]]\n            [antizer.reagent :as ant]\n            [eckersdorf.routes.core :as routes]\n            ))&quot;, :offset 1760, :ns &quot;eckersdorf.core&quot;} {:command &quot;(ns eckersdorf.figwheel\n  (:require [figwheel-sidecar.repl-api :refer :all]))&quot;, :offset 77, :ns &quot;user&quot;} {:command &quot;(cljs-repl)&quot;, :offset 11, :ns &quot;eckersdorf.figwheel&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [cljs.spec.alpha :as s]\n            [re-frame.core :as rf]\n            [re-frame.db :refer [app-db]]))&quot;, :offset 134, :ns &quot;user&quot;} {:command &quot;(s/explain :mongo/object-id \&quot;sex\&quot;)&quot;, :offset 34, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :string/email-address \&quot;sex\&quot;)&quot;, :offset 39, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :string/number \&quot;sex\&quot;)&quot;, :offset 32, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :datetime/datetime \&quot;sex\&quot;)&quot;, :offset 36, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :address/street-name \&quot;sex\&quot;)&quot;, :offset 38, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :contact/email-address \&quot;sex\&quot;)&quot;, :offset 40, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :user/first-name \&quot;sex\&quot;)&quot;, :offset 34, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :worker/object-id \&quot;sex\&quot;)&quot;, :offset 35, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :work-schedule/datetime \&quot;sex\&quot;)&quot;, :offset 41, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(ns eckersdorf.specs.users\n  #?(:clj\n     (:require [clojure.spec.alpha :as s]\n               [cuerdas.core :as str]))\n  #?(:cljs\n     (:require [cljs.spec.alpha :as s]\n       [cuerdas.core :as str])))&quot;, :offset 201, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(s/explain :user/email-address \&quot;sex\&quot;)&quot;, :offset 37, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [cljs.spec.alpha :as s]\n            [eckersdorf.specs.workplaces]\n            [re-frame.core :as rf]\n            [re-frame.db :refer [app-db]]))&quot;, :offset 176, :ns &quot;eckersdorf.specs.users&quot;} {:command &quot;(s/explain :workplace/object-id \&quot;sex\&quot;)&quot;, :offset 38, :ns &quot;eckersdorf.repl&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.lein">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration name="figwheel" type="ClojureREPL" factoryName="Remote">
      <setting name="host" value="localhost" />
      <setting name="port" value="7002" />
      <setting name="replType" value="0" />
      <module name="eckersdorf" />
    </configuration>
    <configuration name="lein" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="eckersdorf" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <list size="2">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.lein" />
      <item index="1" class="java.lang.String" itemvalue="Clojure REPL.figwheel" />
    </list>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="a1565c9d-e360-4856-958e-e9c029697a22" name="Default" comment="" />
      <created>1509606270602</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1509606270602</updated>
      <workItem from="1509606274603" duration="54595000" />
      <workItem from="1509747722754" duration="657000" />
      <workItem from="1509748417198" duration="5700000" />
      <workItem from="1509962722076" duration="6305000" />
      <workItem from="1510087730292" duration="8169000" />
      <workItem from="1510096060255" duration="33000" />
      <workItem from="1510096175818" duration="20161000" />
      <workItem from="1510234773171" duration="6990000" />
      <workItem from="1510599799891" duration="1897000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="104507000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="13" y="12" width="1340" height="743" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.22678019" sideWeight="0.5" order="5" side_tool="true" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.17105263" sideWeight="0.48165137" order="0" side_tool="false" content_ui="combo" />
      <window_info id="Database" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.329653" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.17105263" sideWeight="0.51834863" order="3" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="2" side_tool="false" content_ui="combo" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager />
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/nrepl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="253">
          <caret line="11" column="23" lean-forward="false" selection-start-line="11" selection-start-column="23" selection-end-line="11" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/utils.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="736">
          <caret line="32" column="48" lean-forward="false" selection-start-line="32" selection-start-column="48" selection-end-line="32" selection-end-column="48" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/workers/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="3680">
          <caret line="160" column="36" lean-forward="false" selection-start-line="160" selection-start-column="36" selection-end-line="160" selection-end-column="36" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/workers/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="3818">
          <caret line="166" column="2" lean-forward="false" selection-start-line="166" selection-start-column="2" selection-end-line="166" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/subs.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="4462">
          <caret line="194" column="5" lean-forward="false" selection-start-line="194" selection-start-column="5" selection-end-line="194" selection-end-column="5" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="6831">
          <caret line="297" column="19" lean-forward="false" selection-start-line="297" selection-start-column="19" selection-end-line="297" selection-end-column="19" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/work_schedule.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1196">
          <caret line="52" column="67" lean-forward="false" selection-start-line="52" selection-start-column="67" selection-end-line="52" selection-end-column="67" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/work_schedule.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2277">
          <caret line="99" column="31" lean-forward="false" selection-start-line="99" selection-start-column="31" selection-end-line="99" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/db/specs.cljc" />
    <entry file="jar://$MAVEN_REPOSITORY$/com/novemberain/monger/3.1.0/monger-3.1.0.jar!/monger/collection.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="215">
          <caret line="91" column="0" lean-forward="false" selection-start-line="91" selection-start-column="0" selection-end-line="107" selection-end-column="13" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/utils.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/config.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/users.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="545">
          <caret line="70" column="31" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="176" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="575">
          <caret line="25" column="43" lean-forward="false" selection-start-line="25" selection-start-column="43" selection-end-line="25" selection-end-column="43" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/workers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="322">
          <caret line="26" column="63" lean-forward="false" selection-start-line="26" selection-start-column="63" selection-end-line="26" selection-end-column="71" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/workers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="220">
          <caret line="60" column="12" lean-forward="false" selection-start-line="60" selection-start-column="12" selection-end-line="60" selection-end-column="12" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="23">
          <caret line="1" column="11" lean-forward="false" selection-start-line="1" selection-start-column="11" selection-end-line="1" selection-end-column="11" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/db/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="69">
          <caret line="3" column="18" lean-forward="true" selection-start-line="3" selection-start-column="18" selection-end-line="3" selection-end-column="18" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/users.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/address.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/workplaces.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/workers.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/work_schedule.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/contacts.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs/base.cljc" />
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/utils.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="30" lean-forward="false" selection-start-line="0" selection-start-column="30" selection-end-line="0" selection-end-column="30" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/view/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="453">
          <caret line="64" column="75" lean-forward="true" selection-start-line="64" selection-start-column="75" selection-end-line="64" selection-end-column="75" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/reagent/reagent/0.8.0-alpha2/reagent-0.8.0-alpha2.jar!/reagent/ratom.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-56">
          <caret line="347" column="38" lean-forward="false" selection-start-line="347" selection-start-column="38" selection-end-line="347" selection-end-column="38" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/reagent/reagent/0.8.0-alpha2/reagent-0.8.0-alpha2.jar!/reagent/ratom.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="115">
          <caret line="5" column="31" lean-forward="false" selection-start-line="5" selection-start-column="31" selection-end-line="5" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/init.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="368">
          <caret line="16" column="23" lean-forward="true" selection-start-line="16" selection-start-column="23" selection-end-line="16" selection-end-column="23" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/env/dev/clj/eckersdorf/figwheel.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="69">
          <caret line="3" column="10" lean-forward="false" selection-start-line="3" selection-start-column="10" selection-end-line="3" selection-end-column="10" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/view/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="23">
          <caret line="6" column="16" lean-forward="false" selection-start-line="6" selection-start-column="16" selection-end-line="6" selection-end-column="16" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/re-frame/re-frame/0.10.2/re-frame-0.10.2.jar!/re_frame/core.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="197">
          <caret line="44" column="31" lean-forward="false" selection-start-line="44" selection-start-column="31" selection-end-line="44" selection-end-column="31" />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/re-frame/re-frame/0.10.2/re-frame-0.10.2.jar!/re_frame/subs.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-1321">
          <caret line="175" column="6" lean-forward="false" selection-start-line="175" selection-start-column="6" selection-end-line="175" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="197">
          <caret line="146" column="2" lean-forward="false" selection-start-line="146" selection-start-column="2" selection-end-line="146" selection-end-column="2" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/flex.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="197">
          <caret line="211" column="6" lean-forward="false" selection-start-line="211" selection-start-column="6" selection-end-line="211" selection-end-column="6" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/contacts.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="243">
          <caret line="69" column="29" lean-forward="false" selection-start-line="69" selection-start-column="29" selection-end-line="69" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="253">
          <caret line="11" column="29" lean-forward="false" selection-start-line="11" selection-start-column="29" selection-end-line="11" selection-end-column="29" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/env/dev/cljs/eckersdorf/repl.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="69">
          <caret line="3" column="43" lean-forward="false" selection-start-line="3" selection-start-column="43" selection-end-line="3" selection-end-column="43" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/subs.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1794">
          <caret line="78" column="80" lean-forward="false" selection-start-line="78" selection-start-column="80" selection-end-line="78" selection-end-column="80" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/env/dev/cljs/eckersdorf/app.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="138">
          <caret line="6" column="23" lean-forward="false" selection-start-line="6" selection-start-column="0" selection-end-line="6" selection-end-column="23" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/db.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="368">
          <caret line="16" column="18" lean-forward="false" selection-start-line="16" selection-start-column="18" selection-end-line="16" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/contacts/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="3151">
          <caret line="137" column="92" lean-forward="false" selection-start-line="137" selection-start-column="92" selection-end-line="137" selection-end-column="92" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/contacts.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1173">
          <caret line="51" column="61" lean-forward="false" selection-start-line="51" selection-start-column="61" selection-end-line="51" selection-end-column="61" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="6118">
          <caret line="266" column="69" lean-forward="false" selection-start-line="266" selection-start-column="69" selection-end-line="266" selection-end-column="69" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/specs.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="920">
          <caret line="40" column="44" lean-forward="false" selection-start-line="40" selection-start-column="44" selection-end-line="40" selection-end-column="44" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/users.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1610">
          <caret line="70" column="81" lean-forward="false" selection-start-line="70" selection-start-column="81" selection-end-line="70" selection-end-column="81" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2530">
          <caret line="110" column="105" lean-forward="false" selection-start-line="110" selection-start-column="105" selection-end-line="110" selection-end-column="105" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/env/dev/clj/eckersdorf/repl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="243">
          <caret line="56" column="6" lean-forward="false" selection-start-line="56" selection-start-column="6" selection-end-line="56" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="Copyright.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>