<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ChangeListManager">
    <list default="true" id="2d15cdde-731e-425d-93a7-18dba581f6ee" name="Default" comment="">
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/.idea/workspace.xml" afterPath="$PROJECT_DIR$/.idea/workspace.xml" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/resources/config.edn" afterPath="$PROJECT_DIR$/resources/config.edn" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/resources/public/js/app.js" afterPath="$PROJECT_DIR$/resources/public/js/app.js" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/work_schedule.clj" afterPath="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/work_schedule.clj" />
      <change type="MODIFICATION" beforePath="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/events.cljs" afterPath="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/events.cljs" />
    </list>
    <option name="EXCLUDED_CONVERTED_TO_IGNORED" value="true" />
    <option name="TRACKING_ENABLED" value="true" />
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FavoritesManager">
    <favorites_list name="eckersdorf" />
  </component>
  <component name="FileColors">
    <fileColor scope="Non-Project Files (Material Default)" color="2E3C43" />
    <fileColor scope="Non-Project Files (Material Darker)" color="323232" />
    <fileColor scope="Non-Project Files (Material Lighter)" color="eae8e8" />
    <fileColor scope="Non-Project Files (Material Palenight)" color="2f2e43" />
  </component>
  <component name="FileEditorManager">
    <leaf SIDE_TABS_SIZE_LIMIT_KEY="300">
      <file leaf-file-name="specs.cljc" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljc/eckersdorf/db/specs.cljc">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="601">
              <caret line="92" column="72" lean-forward="false" selection-start-line="92" selection-start-column="72" selection-end-line="92" selection-end-column="72" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="work_schedule.clj" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/work_schedule.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="667">
              <caret line="51" column="51" lean-forward="false" selection-start-line="51" selection-start-column="51" selection-end-line="51" selection-end-column="51" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="events.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/events.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="207">
              <caret line="321" column="6" lean-forward="false" selection-start-line="321" selection-start-column="6" selection-end-line="321" selection-end-column="6" />
              <folding>
                <marker date="1509398253804" expanded="true" signature="1454:1488" ph="(rf/reg-event-db ...)" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="work_schedule.clj" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/db/work_schedule.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="601">
              <caret line="89" column="5" lean-forward="true" selection-start-line="89" selection-start-column="5" selection-end-line="89" selection-end-column="5" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="repl.clj" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/env/dev/clj/eckersdorf/repl.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="396">
              <caret line="59" column="6" lean-forward="false" selection-start-line="59" selection-start-column="6" selection-end-line="59" selection-end-column="6" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="config.edn" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/resources/config.edn">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="69">
              <caret line="3" column="21" lean-forward="false" selection-start-line="3" selection-start-column="21" selection-end-line="3" selection-end-column="21" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="project.clj" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/project.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="277">
              <caret line="52" column="39" lean-forward="true" selection-start-line="52" selection-start-column="39" selection-end-line="52" selection-end-column="39" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="ui.cljs" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/view/ui.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="-595">
              <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="ui.cljs" pinned="false" current-in-tab="true">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/ui.cljs">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="327">
              <caret line="274" column="77" lean-forward="false" selection-start-line="274" selection-start-column="77" selection-end-line="274" selection-end-column="77" />
              <folding>
                <marker date="1509398869651" expanded="true" signature="2241:2247" ph="(defn work-cell ...)" />
              </folding>
            </state>
          </provider>
        </entry>
      </file>
      <file leaf-file-name="server.clj" pinned="false" current-in-tab="false">
        <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/server.clj">
          <provider selected="true" editor-type-id="text-editor">
            <state relative-caret-position="345">
              <caret line="15" column="18" lean-forward="true" selection-start-line="15" selection-start-column="18" selection-end-line="15" selection-end-column="18" />
              <folding />
            </state>
          </provider>
        </entry>
      </file>
    </leaf>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="CLJC Namespace" />
        <option value="ClojureScript Namespace" />
      </list>
    </option>
  </component>
  <component name="FindInProjectRecents">
    <findStrings>
      <find>set-ed</find>
      <find>work-cell</find>
      <find>equal</find>
      <find>= dateim</find>
      <find>= date</find>
      <find>dtc/to</find>
      <find>align-Content</find>
      <find>hours-w</find>
      <find>is-holi</find>
      <find>event-fx</find>
      <find>calc</find>
      <find>sele</find>
      <find>all-wor</find>
      <find>zero</find>
      <find>start-o</find>
      <find>begin</find>
      <find>vacation</find>
      <find>printl</find>
      <find>gt</find>
      <find>set-edited</find>
      <find>sync</find>
      <find>tool</find>
      <find>too</find>
      <find>println</find>
      <find>trace</find>
      <find>cljsbul</find>
      <find>print</find>
      <find>ljs.spec.alpha/explain</find>
      <find>nrepl</find>
      <find>main-date</find>
    </findStrings>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GradleLocalSettings">
    <option name="externalProjectsViewState">
      <projects_view />
    </option>
  </component>
  <component name="IdeDocumentHistory">
    <option name="CHANGED_PATHS">
      <list>
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/core.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/workers/subs.cljs" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/utils.cljc" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/workers.clj" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/workers/events.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/workers/ui.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/init.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/db.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/db/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/db/timetable.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/timetable/db.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/timetable/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/timetable/subs.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/work-schedule.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/core.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/db.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/flex.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/view/ui.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/db.cljs" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/routes/services/work_schedule.clj" />
        <option value="$PROJECT_DIR$/src/cljc/eckersdorf/db/specs.cljc" />
        <option value="$PROJECT_DIR$/src/clj/eckersdorf/db/work_schedule.clj" />
        <option value="$PROJECT_DIR$/env/dev/clj/eckersdorf/repl.clj" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/repl.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/subs.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/ui.cljs" />
        <option value="$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/utils.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/subs.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/core.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/db/work_schedule.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/workers.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/routes/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workplaces/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workplaces/ui.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/user/login/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/user/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/ui.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/view/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/env/prod/cljs/eckersdorf/app.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/subs.cljs" />
        <option value="$PROJECT_DIR$/project.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/server.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/project.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/resources/config.edn" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/env/dev/clj/eckersdorf/repl.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/events.cljs" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/work_schedule.clj" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljc/eckersdorf/db/specs.cljc" />
        <option value="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/ui.cljs" />
      </list>
    </option>
  </component>
  <component name="JsBuildToolGruntFileManager" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsBuildToolPackageJson" detection-done="true" sorting="DEFINITION_ORDER" />
  <component name="JsGulpfileManager">
    <detection-done>true</detection-done>
    <sorting>DEFINITION_ORDER</sorting>
  </component>
  <component name="NodeModulesDirectoryManager">
    <handled-path value="$USER_HOME$/data/code/Clojure/eckersdorf/node_modules" />
  </component>
  <component name="ProjectFrameBounds">
    <option name="x" value="40" />
    <option name="y" value="45" />
    <option name="width" value="1230" />
    <option name="height" value="995" />
  </component>
  <component name="ProjectInspectionProfilesVisibleTreeState">
    <entry key="Project Default">
      <profile-state>
        <expanded-state>
          <State>
            <id />
          </State>
          <State>
            <id>Android &gt; Lint &gt; Correctness</id>
          </State>
          <State>
            <id>Android &gt; Lint &gt; Usability &gt; Typography</id>
          </State>
          <State>
            <id>Assignment issuesGroovy</id>
          </State>
          <State>
            <id>Assignment issuesJava</id>
          </State>
          <State>
            <id>Bitwise operation issuesJavaScript</id>
          </State>
          <State>
            <id>Control flow issuesJava</id>
          </State>
          <State>
            <id>GeneralJavaScript</id>
          </State>
          <State>
            <id>Groovy</id>
          </State>
          <State>
            <id>Java</id>
          </State>
          <State>
            <id>JavaScript</id>
          </State>
          <State>
            <id>Potentially confusing code constructsGroovy</id>
          </State>
          <State>
            <id>Potentially confusing code constructsJavaScript</id>
          </State>
          <State>
            <id>Probable bugsGroovy</id>
          </State>
          <State>
            <id>Probable bugsJava</id>
          </State>
          <State>
            <id>Probable bugsJavaScript</id>
          </State>
          <State>
            <id>Spelling</id>
          </State>
          <State>
            <id>Threading issuesGroovy</id>
          </State>
          <State>
            <id>Threading issuesJava</id>
          </State>
          <State>
            <id>UI Form Problems</id>
          </State>
          <State>
            <id>XPath</id>
          </State>
        </expanded-state>
        <selected-state>
          <State>
            <id>SpellCheckingInspection</id>
          </State>
        </selected-state>
      </profile-state>
    </entry>
  </component>
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectView">
    <navigator currentView="ProjectPane" proportions="" version="1">
      <flattenPackages />
      <showMembers />
      <showModules />
      <showLibraryContents />
      <hideEmptyPackages />
      <abbreviatePackageNames />
      <autoscrollToSource />
      <autoscrollFromSource />
      <sortByType />
      <manualOrder />
      <foldersAlwaysOnTop value="true" />
    </navigator>
    <panes>
      <pane id="AndroidView" />
      <pane id="Scratches" />
      <pane id="PackagesPane" />
      <pane id="ProjectPane">
        <subPane>
          <expand>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="dev" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="prod" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="prod" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="env" type="462c0819:PsiDirectoryNode" />
              <item name="prod" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="resources" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="db" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="routes" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="clj" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="routes" type="462c0819:PsiDirectoryNode" />
              <item name="services" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljc" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljc" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljc" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="db" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="db" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="view" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="work_schedule" type="462c0819:PsiDirectoryNode" />
            </path>
            <path>
              <item name="eckersdorf" type="b2602c69:ProjectViewProjectNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="src" type="462c0819:PsiDirectoryNode" />
              <item name="cljs" type="462c0819:PsiDirectoryNode" />
              <item name="eckersdorf" type="462c0819:PsiDirectoryNode" />
              <item name="workers" type="462c0819:PsiDirectoryNode" />
            </path>
          </expand>
          <select />
        </subPane>
      </pane>
      <pane id="Scope" />
    </panes>
  </component>
  <component name="PropertiesComponent">
    <property name="GoToClass.includeLibraries" value="false" />
    <property name="GoToClass.toSaveIncludeLibraries" value="false" />
    <property name="GoToFile.includeJavaFiles" value="false" />
    <property name="MemberChooser.sorted" value="false" />
    <property name="MemberChooser.showClasses" value="true" />
    <property name="MemberChooser.copyJavadoc" value="false" />
    <property name="settings.editor.selected.configurable" value="Errors" />
    <property name="WebServerToolWindowFactoryState" value="false" />
    <property name="aspect.path.notification.shown" value="true" />
    <property name="last_opened_file_path" value="$PROJECT_DIR$/../luminus-aleph" />
    <property name="project.structure.last.edited" value="Modules" />
    <property name="project.structure.proportion" value="0.15" />
    <property name="project.structure.side.proportion" value="0.2" />
    <property name="cursive.last.file.extension./home/huxley/code/clojure/eckersdorf/src/cljc" value="cljc" />
    <property name="cursive.last.file.extension./home/huxley/data/code/Clojure/eckersdorf/src/cljs" value="cljs" />
    <property name="nodejs_interpreter_path" value="/usr/bin/node" />
    <property name="cursive.last.file.extension./home/huxley/code/clojure/eckersdorf/src/cljs" value="cljs" />
  </component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services" />
      <recent name="$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule" />
      <recent name="$PROJECT_DIR$/src/cljs/eckersdorf" />
    </key>
  </component>
  <component name="ReplState" timestamp="1509399340921">{:repl-history {:ide [], :local [{:command &quot;(defmethod schedule-work [ObjectId String DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime\n              work-schedule/work-type] :as m}]\n  (mr/acknowledged? (mc/insert db \&quot;work-schedule\&quot;\n                               (-&gt; m (clojure.core/update :work-schedule/worker-id #(ObjectId. ^String %))))))&quot;, :offset 375, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod schedule-work [String String DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime\n              work-schedule/work-type] :as m}]\n  (mr/acknowledged? (mc/insert db \&quot;work-schedule\&quot;\n                               (-&gt; m\n                                   (clojure.core/update :work-schedule/workplace-id #(ObjectId. ^String %))\n                                   (clojure.core/update :work-schedule/worker-id #(ObjectId. ^String %))))))&quot;, :offset 516, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(first (db.workplaces/workplaces-list tmp-db))&quot;, :offset 46, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(first (db.workers/workers-list tmp-db))&quot;, :offset 40, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/schedule-work tmp-db\n                                {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                                 :work-schedule/worker-id \&quot;59ed11e7fe1b232a5593a5a4\&quot;\n                                 :work-schedule/datetime (dt/now)\n                                 :work-schedule/work-type \&quot;seller\&quot;})&quot;, :offset 346, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(ns eckersdorf.routes.services.work-schedule\n  (:require [clojure.spec.alpha :as s]\n            [clojure.core.async :refer [go]]\n            [schema.core :as schema]\n            [yada.yada :as yada]\n            [monger.collection :as mc]\n            [taoensso.timbre :as timbre]\n            [taoensso.encore :as encore :refer [assoc-some]]\n            [manifold.deferred :as d]\n            [cuerdas.core :as str]\n            [hiccup.core :as hiccup]\n            [yada.jwt :as jwt]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [eckersdorf.utils :refer [add-ns]]))&quot;, :offset 592, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn workers-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1177, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1178, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn services-routes [db]\n  [\&quot;/api\&quot;\n   [\n    [\&quot;/1.0\&quot;\n     [\n      (services.users/users-routes db)\n      (services.workplaces/workplaces-routes db)\n      (services.workers/schedule-routes db)\n      (services.work-schedule/schedule-routes db)]]]])&quot;, :offset 247, :ns &quot;eckersdorf.routes.services.core&quot;} {:command &quot;(ns eckersdorf.routes.services.core\n  (:require [clojure.spec.alpha :as s]\n            [clojure.core.async :refer [go]]\n            [schema.core :as schema]\n            [yada.yada :as yada]\n            [monger.collection :as mc]\n            [eckersdorf.routes.services.users :as services.users]\n            [eckersdorf.routes.services.work-schedule :as services.workers]\n            [eckersdorf.routes.services.workplaces :as services.workplaces]\n            [eckersdorf.routes.services.work-schedule :as services.work-schedule]\n            [taoensso.timbre :as timbre]\n            [taoensso.encore :as encore :refer [assoc-some]]\n            [manifold.deferred :as d]\n            [cuerdas.core :as str]\n            [hiccup.core :as hiccup]\n            [yada.jwt :as jwt]\n            ))&quot;, :offset 786, :ns &quot;eckersdorf.routes.services.core&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println (-&gt; works (first) :datetime :date :type))\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1213, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println (-&gt; works (first) :datetime))\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1201, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println (-&gt; works (first) :datetime :date))\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1207, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println (-&gt; works (first) :datetime :date (class)))\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1215, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(ns eckersdorf.routes.services.work-schedule\n  (:require [clojure.spec.alpha :as s]\n            [clojure.core.async :refer [go]]\n            [schema.core :as schema]\n            [yada.yada :as yada]\n            [monger.collection :as mc]\n            [taoensso.timbre :as timbre]\n            [taoensso.encore :as encore :refer [assoc-some]]\n            [manifold.deferred :as d]\n            [cuerdas.core :as str]\n            [hiccup.core :as hiccup]\n            [yada.jwt :as jwt]\n            [clj-time.core :as dt]\n            [clj-time.coerce :as dtc]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [eckersdorf.utils :refer [add-ns]]))&quot;, :offset 665, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body]))]\n                             (println (-&gt; works (first) :datetime :date (dtc/from-string)))\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1225, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (map (fn [m] (update m :datetime #(-&gt; % :date (dtc/from-string))))))]\n                             (println works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1289, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt;&gt; (get-in ctx [:parameters :body])\n                                            (map (fn [m] (update m :datetime #(-&gt; % :date (dtc/from-string))))))]\n                             (println works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1291, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m] (update m :datetime #(-&gt; % :date (dtc/from-string))))))\n                                           (add-ns :work-schedule))]\n                             (println works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1362, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (println works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1438, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(dt/now)&quot;, :offset 7, :ns &quot;eckersdorf.core&quot;} {:command &quot;(ns eckersdorf.routes.services.core\n  (:require [clojure.spec.alpha :as s]\n            [clojure.core.async :refer [go]]\n            [schema.core :as schema]\n            [yada.yada :as yada]\n            [monger.collection :as mc]\n            [eckersdorf.routes.services.users :as services.users]\n            [eckersdorf.routes.services.workers :as services.workers]\n            [eckersdorf.routes.services.workplaces :as services.workplaces]\n            [eckersdorf.routes.services.work-schedule :as services.work-schedule]\n            [taoensso.timbre :as timbre]\n            [taoensso.encore :as encore :refer [assoc-some]]\n            [manifold.deferred :as d]\n            [cuerdas.core :as str]\n            [hiccup.core :as hiccup]\n            [yada.jwt :as jwt]\n            ))&quot;, :offset 780, :ns &quot;eckersdorf.routes.services.core&quot;} {:command &quot;(db.work-schedule/month-query {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/worker-id \&quot;59ed1989fe1b232a5593a5a7\&quot;\n                               :work-schedule/datetime (dt/date-time 2017 9)})&quot;, :offset 247, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmulti month-query\n  (fn [db {:keys [work-schedule/workplace-id\n                  work-schedule/worker-id\n                  work-schedule/datetime]}]\n    [(class workplace-id) (class worker-id) (class datetime)]))&quot;, :offset 216, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (dt/first-day-of-the-month datetime)\n        end-datetime (dt/last-day-of-the-month datetime)]\n    (mc/find-maps db \&quot;work-schedule\&quot; (assoc doc :work-schedule/datetime\n                                                {\&quot;$gt\&quot; begin-datetime\n                                                 \&quot;$le\&quot; end-datetime}))))&quot;, :offset 511, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [String ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (month-query (clojure.core/update doc :work-schedule/workplace-id #(ObjectId. ^String workplace-id))))&quot;, :offset 281, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId String DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (month-query (clojure.core/update doc :work-schedule/worker-id #(ObjectId. ^String worker-id))))&quot;, :offset 275, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [String String DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (month-query (clojure.core/update doc :work-schedule/workplace-id #(ObjectId. ^String workplace-id)\n                                        :work-schedule/worker-id #(ObjectId. ^String worker-id))))&quot;, :offset 375, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [clojure.spec.alpha :as s]\n            [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [aero.core :as aero]\n            [taoensso.encore :as encore]\n            [taoensso.timbre :as timbre]\n            [monger.collection :as mc]\n            [eckersdorf.server :as server]\n            [eckersdorf.db.core :as db]\n            [eckersdorf.routes.core :as routes]\n            [eckersdorf.system :as system]\n            [eckersdorf.db.users :as users]\n            [eckersdorf.db.workers :as db.workers]\n            [eckersdorf.db.workplaces :as db.workplaces]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [cuerdas.core :as str]\n            [clojure.spec.alpha :as s]\n            [buddy.sign.jwt :as jwt]\n            [buddy.hashers :as hashers]\n            [clj-time.core :as t]\n            [progrock.core :as pr]\n            [clojure.zip :as zip]\n            [progrock.core :as pr]\n            [clojure.set :as set]\n            [clj-time.core :as dt])\n  (:import (org.bson.types ObjectId)))&quot;, :offset 1091, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/worker-id    \&quot;59ed1989fe1b232a5593a5a7\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 291, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod month-query [ObjectId ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (dt/first-day-of-the-month datetime)\n        end-datetime (dt/last-day-of-the-month datetime)]\n    (mc/find-maps db \&quot;work-schedule\&quot; (assoc doc :work-schedule/datetime\n                                                {\&quot;$gt\&quot; begin-datetime\n                                                 \&quot;$lte\&quot; end-datetime}))))&quot;, :offset 512, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;)\n                               :work-schedule/worker-id    \&quot;59ed1989fe1b232a5593a5a7\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 303, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;)\n                               :work-schedule/worker-id    (ObjectId. \&quot;59ed1989fe1b232a5593a5a7\&quot;)\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 315, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod month-query [String ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (month-query db doc))&quot;, :offset 200, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [String ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/worker-id\n              work-schedule/datetime] :as doc}]\n  (month-query db (clojure.core/update doc :work-schedule/workplace-id #(ObjectId. ^String %))))&quot;, :offset 273, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defn create-work-schedule-collection [db]\n  (when-not (mc/exists? db \&quot;work-schedule\&quot;)\n    (mc/create db \&quot;work-schedule\&quot; {})\n    (mc/create-index db \&quot;work-schedule\&quot; {:work-schedule/workplace-id 1})\n    (mc/create-index db \&quot;work-schedule\&quot; {:work-schedule/datetime 1})\n    (mc/create-index db \&quot;work-schedule\&quot; {:work-schedule/worker-id 1})))&quot;, :offset 338, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defn drop-work-schedule-collection [db]\n  (mc/remove db \&quot;work-schedule\&quot;))&quot;, :offset 74, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defn reset-work-schedule-collection [db]\n  (drop-work-schedule-collection db)\n  (create-work-schedule-collection db))&quot;, :offset 118, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defn create-work-schedule-collection [db]\n  (when-not (mc/exists? db \&quot;work-schedule\&quot;)\n    (mc/create db \&quot;work-schedule\&quot; {})\n    ;(mc/create-index db \&quot;work-schedule\&quot; {:work-schedule/workplace-id 1})\n    ;(mc/create-index db \&quot;work-schedule\&quot; {:work-schedule/datetime 1})\n    ;(mc/create-index db \&quot;work-schedule\&quot; {:work-schedule/worker-id 1})\n    ))&quot;, :offset 346, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(dtc/from-string \&quot;2017-09-01T12:00:00.000+02:00\&quot;)&quot;, :offset 49, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/insert tmp-db \&quot;work-schedule\&quot;\n           {\n            ;:mongo/object-id            (ObjectId. \&quot;59f5dd198466bc769ed36a85\&quot;),\n            :work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;),\n            :work-schedule/worker-id    (ObjectId. \&quot;59ed1989fe1b232a5593a5a7\&quot;),\n            :work-schedule/datetime     (dtc/from-string \&quot;2017-09-01T12:00:00.000+02:00\&quot;),\n            :work-schedule/work-type    \&quot;seller\&quot;})&quot;, :offset 429, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/indexes-on tmp-db \&quot;work-schedule\&quot;)&quot;, :offset 38, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/insert tmp-db \&quot;work-schedule\&quot;\n           {\n            ;:mongo/object-id            (ObjectId. \&quot;59f5dd198466bc769ed36a85\&quot;),\n            ;:work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;),\n            :work-schedule/worker-id    (ObjectId. \&quot;59ed1989fe1b232a5593a5a7\&quot;),\n            :work-schedule/datetime     (dtc/from-string \&quot;2017-09-01T12:00:00.000+02:00\&quot;),\n            :work-schedule/work-type    \&quot;seller\&quot;})&quot;, :offset 430, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/drop tmp-db \&quot;work-schedule\&quot;)&quot;, :offset 32, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/insert tmp-db \&quot;work-schedule\&quot;\n           {\n            ;:mongo/object-id            (ObjectId. \&quot;59f5dd198466bc769ed36a85\&quot;),\n            ;:work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;),\n            :work-schedule/worker-id    nil,\n            :work-schedule/datetime     (dtc/from-string \&quot;2017-09-01T12:00:00.000+02:00\&quot;),\n            :work-schedule/work-type    \&quot;seller\&quot;})&quot;, :offset 395, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(mc/insert tmp-db \&quot;work-schedule\&quot;\n           {\n            ;:mongo/object-id            (ObjectId. \&quot;59f5dd198466bc769ed36a85\&quot;),\n            ;:work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;),\n            :work-schedule/datetime     (dtc/from-string \&quot;2017-09-01T12:00:00.000+02:00\&quot;),\n            :work-schedule/work-type    \&quot;seller\&quot;})&quot;, :offset 350, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/worker-id    (ObjectId. \&quot;59ed1989fe1b232a5593a5a7\&quot;)\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 303, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               \n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 237, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/worker-id    nil\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 268, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmulti month-query\n  (fn [db {:keys [work-schedule/workplace-id\n                  work-schedule/datetime]}]\n    [(class workplace-id) (class datetime)]))&quot;, :offset 156, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (dt/first-day-of-the-month datetime)\n        end-datetime (dt/last-day-of-the-month datetime)]\n    (mc/find-maps db \&quot;work-schedule\&quot; (assoc doc :work-schedule/datetime\n                                                {\&quot;$gt\&quot; begin-datetime\n                                                 \&quot;$lte\&quot; end-datetime}))))&quot;, :offset 465, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1461, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(db.work-schedule/month-query tmp-db\n                              {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                               :work-schedule/datetime     (dt/date-time 2017 9)})&quot;, :offset 205, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data []}\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1501, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(db.work-schedule/remove-month tmp-db {:work-schedule/workplace-id (ObjectId. \&quot;59cd4fc48466bc2056615d66\&quot;)\n                                       :work-schedule/datetime (dt/date-time 2017 9)})&quot;, :offset 192, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod save-month [ObjectId DateTime]\n  [db works]\n  (let [{:keys [work-schedule/workplace-id\n                work-schedule/datetime] :as m} (first works)]\n    (println :m m)\n    (remove-month db m)\n    (mc/insert-batch db \&quot;work-schedule\&quot; works)))&quot;, :offset 251, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod remove-month [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as m}]\n  (let [begin-datetime (dt/first-day-of-the-month datetime)\n        end-datetime (dt/last-day-of-the-month datetime)]\n    (mc/remove db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                   :work-schedule/datetime {\&quot;$gt\&quot;  begin-datetime\n                                                            \&quot;$lte\&quot; end-datetime}})))&quot;, :offset 491, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(db.work-schedule/reset-work-schedule-collection tmp-db)&quot;, :offset 56, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defmethod remove-month [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as m}]\n  (let [begin-datetime (dt/first-day-of-the-month datetime)\n        end-datetime (dt/last-day-of-the-month datetime)]\n    (mc/remove db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                   :work-schedule/datetime {\&quot;$gte\&quot;  begin-datetime\n                                                            \&quot;$lte\&quot; end-datetime}})))&quot;, :offset 492, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(mc/find-maps tmp-db \&quot;work-schedule\&quot;)&quot;, :offset 37, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(count (mc/find-maps tmp-db \&quot;work-schedule\&quot;))&quot;, :offset 45, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            ;:get\n            ;{:produces #{\&quot;application/json\&quot; \&quot;text/plain\&quot;}\n            ; :response (fn [ctx]\n            ;             (let [opts (-&gt;&gt; (get-in ctx [:parameters :query])\n            ;                             (reduce (fn [r [k v]]\n            ;                                       (assoc r k {\&quot;$regex\&quot;   v\n            ;                                                   \&quot;$options\&quot; \&quot;i\&quot;})) {}))]\n            ;               {:data (db.workers/workers-list db opts)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}\n                             ;(if-let [response (db.work-schedule/schedule-work db work)]\n                             ;  {:data response}\n                             ;  (assoc (:response ctx) :status 404))\n                             ))}}})]\n    ]])&quot;, :offset 1546, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(cljs-repl)&quot;, :offset 11, :ns &quot;eckersdorf.figwheel&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (dt/first-day-of-the-month datetime)\n        end-datetime (dt/last-day-of-the-month datetime)]\n    (mc/find-maps db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                      :work-schedule/datetime {\&quot;$gte\&quot;  begin-datetime\n                                                               \&quot;$lte\&quot; end-datetime}})))&quot;, :offset 502, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(dt/first-day-of-the-month (dt/now))&quot;, :offset 36, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(dt/date-midnight (dt/now))&quot;, :offset 27, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(dt/year-month (dt/now))&quot;, :offset 24, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(dt/year (dt/now))&quot;, :offset 18, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(dt/with-time-at-start-of-day (dt/now))&quot;, :offset 39, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             :parameters {:body {:work-schedule/workplace-id schema/Str\n                                 :work-schedule/datetime     schema/Str}}\n             :response   (fn [ctx]\n                           (let [work (get-in ctx [:parameters :body])]\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1215, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             :parameters {:body {:work-schedule/workplace-id schema/Str\n                                 :work-schedule/datetime     schema/Str}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :body])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println work)\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1423, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             :parameters {:body {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :body])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println work)\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1334, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             :parameters {:query {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :query])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println work)\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1336, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :query])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println work)\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1337, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :query])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println (get-in ctx [:parameters :query]))\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1366, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :query])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println (get-in ctx [:parameters :query :datetime])\n                                      (type (get-in ctx [:parameters :query :datetime])))\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1465, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces   #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :query])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (println (get-in ctx [:parameters :query])\n                                      (type (get-in ctx [:parameters :query :datetime])))\n                             {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1455, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [work (-&gt; (get-in ctx [:parameters :query])\n                                        (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                        (add-ns :work-schedule))]\n                           (println (get-in ctx [:parameters :query \&quot;datetime\&quot;])\n                                    (type (get-in ctx [:parameters :query \&quot;datetime\&quot;])))\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1451, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [work (-&gt; (get-in ctx [:parameters :query])\n                                        (add-ns :work-schedule))]\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1190, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [work (-&gt; (get-in ctx [:parameters :query])\n                                        (update :datetime dtc/from-string)\n                                        (add-ns :work-schedule))]\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1265, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [work (-&gt; (get-in ctx [:parameters :query])\n                                        (update \&quot;datetime\&quot; dtc/from-string)\n                                        (add-ns :work-schedule))]\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1266, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [work (-&gt; (get-in ctx [:parameters :query])\n                                        (update \&quot;datetime\&quot; dtc/from-string)\n                                        (add-ns :work-schedule))]\n                           (println (get-in ctx [:parameters :query \&quot;datetime\&quot;])\n                                    (type (get-in ctx [:parameters :query \&quot;datetime\&quot;]))\n                                    work\n                                    (update (get-in ctx [:parameters :query]) \&quot;datetime\&quot; dtc/from-string))\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1583, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(-&gt; {:a {\&quot;sex\&quot; 1}}\n    (get :a)\n    (update \&quot;sex\&quot; inc))&quot;, :offset 55, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [datetime (dtc/from-string (get-in ctx [:parameters :query \&quot;datetime\&quot;]))\n                               work (-&gt; (get-in ctx [:parameters :query])\n                                        (update \&quot;datetime\&quot; dtc/from-string)\n                                        (add-ns :work-schedule))]\n                           (println (get-in ctx [:parameters :query \&quot;datetime\&quot;])\n                                    (type (get-in ctx [:parameters :query \&quot;datetime\&quot;]))\n                                    work\n                                    (update (get-in ctx [:parameters :query]) \&quot;datetime\&quot; dtc/from-string)\n                                    datetime)\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1731, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(dtc/from-string \&quot;20170901T061750\&quot;)&quot;, :offset 35, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(-&gt; (dt/now) (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))&quot;, :offset 72, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(defmethod month-query [ObjectId DateTime]\n  [db {:keys [work-schedule/workplace-id\n              work-schedule/datetime] :as doc}]\n  (let [begin-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/first-day-of-the-month))\n        end-datetime (-&gt; datetime (dt/with-time-at-start-of-day) (dt/last-day-of-the-month))]\n    (println begin-datetime end-datetime)\n    (mc/find-maps db \&quot;work-schedule\&quot; {:work-schedule/workplace-id workplace-id\n                                      :work-schedule/datetime     {\&quot;$gte\&quot; begin-datetime\n                                                                   \&quot;$lte\&quot; end-datetime}})))&quot;, :offset 623, :ns &quot;eckersdorf.db.work-schedule&quot;} {:command &quot;(stop-system)&quot;, :offset 13, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defrecord WebServer [config mongo]\n  component/Lifecycle\n  (start [component]\n    (let [port (:webserver/port config)\n          routes (new-routes mongo)\n          vhosts (vhosts-model [nil\n                                routes])\n          listener (yada/listener vhosts {:port port})]\n      (timbre/info (str/format \&quot;Started web-serwer on port %s\&quot; (:port listener)))\n      (assoc component :listener listener)))\n  (stop [component]\n    (when-let [close (get-in component [:listener :close])]\n      (timbre/info (str/format \&quot;Stoped web-serwer on port %s\&quot; (get-in component [:listener :port])))\n      (close))\n    (assoc component :listener nil)))&quot;, :offset 648, :ns &quot;eckersdorf.server&quot;} {:command &quot;(ns eckersdorf.repl\n  (:require [clojure.spec.alpha :as s]\n            [clojure.java.io :as io]\n            [com.stuartsierra.component :as component]\n            [aero.core :as aero]\n            [taoensso.encore :as encore]\n            [taoensso.timbre :as timbre]\n            [monger.collection :as mc]\n            [eckersdorf.server :as server]\n            [eckersdorf.db.core :as db]\n            [eckersdorf.routes.core :as routes]\n            [eckersdorf.system :as system]\n            [eckersdorf.db.users :as users]\n            [eckersdorf.db.workers :as db.workers]\n            [eckersdorf.db.workplaces :as db.workplaces]\n            [eckersdorf.db.work-schedule :as db.work-schedule]\n            [cuerdas.core :as str]\n            [clojure.spec.alpha :as s]\n            [buddy.sign.jwt :as jwt]\n            [buddy.hashers :as hashers]\n            [clj-time.core :as t]\n            [progrock.core :as pr]\n            [clojure.zip :as zip]\n            [progrock.core :as pr]\n            [clojure.set :as set]\n            [clj-time.core :as dt]\n            [clj-time.coerce :as dtc])\n  (:import (org.bson.types ObjectId)))&quot;, :offset 1129, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(timbre/merge-config! {:level :info})&quot;, :offset 37, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(def repl-system nil)&quot;, :offset 21, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(def tmp-db nil)&quot;, :offset 16, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn init-system []\n  (alter-var-root #'repl-system (constantly (system/new-system))))&quot;, :offset 87, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn start-system []\n  (alter-var-root #'repl-system component/start-system)\n  (alter-var-root #'tmp-db (fn [_] (:db (:mongo repl-system)))))&quot;, :offset 142, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn stop-system []\n  (alter-var-root #'repl-system\n                  (fn [s] (when s (component/stop-system s)))))&quot;, :offset 116, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn go-system []\n  (init-system)\n  (start-system))&quot;, :offset 52, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn reset-system []\n  (stop-system)\n  (init-system)\n  (start-system))&quot;, :offset 71, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(go-system)&quot;, :offset 11, :ns &quot;eckersdorf.repl&quot;} {:command &quot;(defn schedule-routes [db]\n  [\&quot;/work-schedule\&quot;\n   [\n    [\&quot;\&quot; (yada/resource\n          {:methods\n           {\n            :get\n            {:produces #{\&quot;application/json\&quot;}\n             ;:parameters {:query {schema/Any schema/Any}}\n             :response (fn [ctx]\n                         (let [datetime (get-in ctx [:parameters :query \&quot;datetime\&quot;])\n                               work (-&gt; (get-in ctx [:parameters :query])\n                                        (update \&quot;datetime\&quot; dtc/from-string)\n                                        (add-ns :work-schedule))]\n                           {:data (db.work-schedule/month-query db work)}))}\n            :post\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body [{schema/Any schema/Any}]}\n             :response   (fn [ctx]\n                           (let [works (-&gt; (get-in ctx [:parameters :body])\n                                           (-&gt;&gt; (map (fn [m]\n                                                       (-&gt; m (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                                           (add-ns :work-schedule))))))]\n                             (db.work-schedule/save-month db works)\n                             {:data (db.work-schedule/month-query db (first works))}))}\n            :delete\n            {:produces   #{\&quot;application/json\&quot;}\n             :consumes   #{\&quot;application/json\&quot;}\n             :parameters {:body {schema/Any schema/Any}}\n             :response   (fn [ctx]\n                           (let [work (-&gt; (get-in ctx [:parameters :body])\n                                          (update :datetime #(-&gt; % :date (dtc/from-string)))\n                                          (add-ns :work-schedule))]\n                             (db.work-schedule/remove-month db work)\n                             {:data (db.work-schedule/month-query db (first works))}))}}})]\n    ]])&quot;, :offset 1950, :ns &quot;eckersdorf.routes.services.work-schedule&quot;} {:command &quot;(reset-system)&quot;, :offset 14, :ns &quot;eckersdorf.repl&quot;}], :remote [{:command &quot;(rf/reg-event-fx\n  :workplaces/request-update\n  (fn [{db :db} _]\n    (let [id (get-in db [:workplaces/workplace-form :mongo/object-id])\n          workplace (-&gt; db :workplaces/workplace-form (dissoc :mongo/object-id))]\n      (println :workplaces/request-update id workplace)\n      {:http-xhrio {:method          :put\n                    :uri             (path \&quot;/api/1.0/workplaces\&quot; id)\n                    :params          workplace\n                    :format          (ajax/text-request-format)\n                    :response-format (ajax/json-response-format {:keywords? true})\n                    :on-success      [:workplaces/request-update-success]\n                    :on-failure      [:workplaces/request-update-failure]}}\n      )))&quot;, :offset 738, :ns &quot;eckersdorf.workplaces.events&quot;} {:command &quot;(defn workplace-dialog [modify?]\n  (let [show-dialog? (rf/subscribe [:workplaces/show-dialog?])\n        workplace-form (rf/subscribe [:workplaces/workplace-form])\n        email-addon (reaction (str \&quot;@\&quot; (or (second (str/split (:workplace/email-address @workplace-form) \&quot;@\&quot;))\n                                           \&quot;teas.com.pl\&quot;)))\n        valid-workplace (r/atom nil)]\n    (fn []\n      [ant/modal {:visible (not (nil? @show-dialog?))\n                  :title   (if (#{:modify} @show-dialog?) \&quot;edytuj sklep\&quot; \&quot;dodaj sklep\&quot;)\n                  :footer  (r/as-element [:div\n                                          [ant/button {:on-click #(rf/dispatch [:workplaces/hide-dialog])}\n                                           \&quot;anuluj\&quot;]\n                                          [ant/button {:type     (if (s/valid? :workplace/workplace @workplace-form)\n                                                                   :primary :danger)\n                                                       :on-click (fn []\n                                                                   (if (s/valid? :workplace/workplace @workplace-form)\n                                                                     (if (not (#{:modify} @show-dialog?))\n                                                                       (rf/dispatch [:workplaces/request-create])\n                                                                       (rf/dispatch [:workplaces/request-update]))\n                                                                     (do\n                                                                       (println (s/explain :workplace/workplace @workplace-form))\n                                                                       (ant/message-warning \&quot;wprowadzono błędne dane\&quot;))))}\n                                           \&quot;dodaj\&quot;]])}\n       [flex/vbox\n        [ant/form {:layout :horizontal}\n         [ant/form-item\n          [flex/hbox\n           [flex/box {:size  2\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{:keys [workplace/name]} @workplace-form]\n              [ant/form-item {:validate-status (when (and (not (nil? name))\n                                                          (not (s/valid? :workplace/name name)))\n                                                 :error)\n                              :help            (cond\n                                                 (and (not (nil? name))\n                                                      (not (s/valid? :workplace/name name)))\n                                                 \&quot;pole nie może być puste\&quot;)}\n               [ant/input {:placeholder \&quot;nazwa\&quot;\n                           :value       name\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc @workplace-form :workplace/name val)]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]\n           [flex/gap {:size \&quot;12px\&quot;}]\n           [flex/box {:size  2\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{:keys [workplace/email-address]} @workplace-form\n                  email-address (first (str/split email-address \&quot;@\&quot;))]\n              [ant/form-item {:validate-status (when (and (not (nil? email-address))\n                                                          (not (s/valid? :workplace/email-address\n                                                                         (str email-address @email-addon))))\n                                                 :error)\n                              :help            (cond\n                                                 (str/empty? email-address)\n                                                 \&quot;pole nie może być puste\&quot;\n                                                 (and (not (nil? email-address))\n                                                      (not (s/valid? :workplace/email-address\n                                                                     (str email-address @email-addon))))\n                                                 \&quot;błędny adres email\&quot;)}\n               [ant/input {:placeholder \&quot;e-mail\&quot;\n                           :value       email-address\n                           :addon-after @email-addon\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc @workplace-form :workplace/email-address\n                                                                                 (if-not (str/empty-or-nil? val)\n                                                                                   (str val @email-addon)\n                                                                                   \&quot;\&quot;))]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]\n           [flex/gap {:size \&quot;12px\&quot;}]\n           [flex/box {:size  1\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            [ant/form-item\n             [ant/select {:value     (or (:workplace/type @workplace-form) \&quot;dc\&quot;)\n                          :on-change (fn [val]\n                                       (let [workplace (assoc @workplace-form :workplace/type val)]\n                                         (rf/dispatch [:workplaces/set-workplace-form workplace])))}\n              [ant/select-option {:value \&quot;dc\&quot;} \&quot;delikatesy\&quot;]\n              [ant/select-option {:value \&quot;shop\&quot;} \&quot;niezrzeszony\&quot;]]]]]]\n         [ant/form-item\n          [flex/hbox\n           [flex/box {:size  3\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{{:keys [address/street-name]} :workplace/address} @workplace-form]\n              [ant/form-item {:validate-status (when (and (not (nil? street-name))\n                                                          (not (s/valid? :address/street-name street-name)))\n                                                 :error)\n                              :help            (cond\n                                                 (str/empty? street-name)\n                                                 \&quot;pole nie może być puste\&quot;\n                                                 (and (not (nil? street-name))\n                                                      (not (s/valid? :address/street-name street-name)))\n                                                 \&quot;błędna nazwa ulicy\&quot;)}\n               [ant/input {:placeholder \&quot;ulica\&quot;\n                           :value       street-name\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc-in @workplace-form\n                                                                    [:workplace/address :address/street-name]\n                                                                    val)]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]\n           [flex/gap {:size \&quot;12px\&quot;}]\n           [flex/box {:size  1\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{{:keys [address/street-number]} :workplace/address} @workplace-form]\n              [ant/form-item {:validate-status (when\n                                                 (and (not (nil? street-number))\n                                                      (not (s/valid? :address/street-number street-number)))\n                                                 :error)\n                              :help            (cond\n                                                 (str/empty? street-number)\n                                                 \&quot;pole nie może być puste\&quot;\n                                                 (and (not (nil? street-number))\n                                                      (not (s/valid? :address/street-number street-number)))\n                                                 \&quot;błędny numer ulicy\&quot;)}\n               [ant/input {:placeholder \&quot;numer ulicy\&quot;\n                           :value       street-number\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc-in @workplace-form\n                                                                    [:workplace/address :address/street-number]\n                                                                    val)]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]\n           [flex/gap {:size \&quot;12px\&quot;}]\n           [flex/box {:size  1\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{{:keys [address/house-number]} :workplace/address} @workplace-form]\n              [ant/form-item {:validate-status (when (and (not (nil? house-number))\n                                                          (not (s/valid? :address/house-number house-number)))\n                                                 :error)\n                              :help            (cond\n                                                 (and (not (nil? house-number))\n                                                      (not (s/valid? :address/house-number house-number)))\n                                                 \&quot;błędny numer budynku\&quot;)}\n               [ant/input {:placeholder \&quot;budynku\&quot;\n                           :value       house-number\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc-in @workplace-form [:workplace/address :address/house-number] val)]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]]]\n         [ant/form-item\n          [flex/hbox\n           [flex/box {:size  1\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{{:keys [address/zip-code]} :workplace/address} @workplace-form]\n              [ant/form-item {:validate-status (when (and (not (nil? zip-code))\n                                                          (not (s/valid? :address/zip-code zip-code)))\n                                                 :error)\n                              :help            (cond\n                                                 (str/empty? zip-code)\n                                                 \&quot;pole nie może być puste\&quot;\n                                                 (and (not (nil? zip-code))\n                                                      (not (s/valid? :address/zip-code zip-code)))\n                                                 \&quot;błędny kod pocztowy\&quot;)}\n               [ant/input {:placeholder \&quot;kod pocztowy\&quot;\n                           :value       zip-code\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc-in @workplace-form [:workplace/address :address/zip-code] val)]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]\n           [flex/gap {:size \&quot;12px\&quot;}]\n           [flex/box {:size  3\n                      :style {:display    :block\n                              :min-height \&quot;32px\&quot;}}\n            (let [{{:keys [address/city]} :workplace/address} @workplace-form]\n              [ant/form-item {:validate-status (when (and (not (nil? city))\n                                                          (not (s/valid? :address/city city)))\n                                                 :error)\n                              :help            (cond\n                                                 (str/empty? city)\n                                                 \&quot;pole nie może być puste\&quot;\n                                                 (and (not (nil? city))\n                                                      (not (s/valid? :address/city city)))\n                                                 \&quot;błędna nazwa miejscowości\&quot;)}\n               [ant/input {:placeholder \&quot;miejscowość\&quot;\n                           :value       city\n                           :on-change   (fn [e]\n                                          (let [val (-&gt; e .-target .-value)\n                                                workplace (assoc-in @workplace-form [:workplace/address :address/city] val)]\n                                            (rf/dispatch [:workplaces/set-workplace-form workplace])))}]])]]]]]])))&quot;, :offset 13035, :ns &quot;eckersdorf.workplaces.ui&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/main-date\n  (fn [db _]\n    (:work-schedule/main-date db)))&quot;, :offset 87, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/main-date])&quot;, :offset 42, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/short-date])&quot;, :offset 43, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/long-date])&quot;, :offset 42, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/days])&quot;, :offset 37, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(s/def :workplace/working-hours {0 {:open int? :close int?}})&quot;, :offset 61, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :workplace/working-hours {int? {:open int? :close int?}})&quot;, :offset 64, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(ns eckersdorf.work-schedule.ui\n  (:require [cljs.spec.alpha :as s]\n            [reagent.core :as r]\n            [reagent.ratom :refer [reaction]]\n            [re-frame.core :as rf]\n            [antizer.reagent :as ant]\n            [cuerdas.core :as str]\n            [eckersdorf.flex :as flex]\n            [eckersdorf.utils :refer [add-ns simplify-string]]\n            [clojure.set :as set]\n            [cljsjs.moment.locale.pl]\n            [cljs-time.coerce :as dtc]))&quot;, :offset 469, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #(re-find \&quot;\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z)\&quot;)))&quot;, :offset 130, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #(re-find \&quot;^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))?$\&quot;)))&quot;, :offset 123, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :email-address/email-address (s/and string? #(re-find #\&quot;(^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$)\&quot; %)))&quot;, :offset 119, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #(re-find \&quot;^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):?(\\d\\d))\&quot;)))&quot;, :offset 121, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #(re-find \&quot;^(\\d{4})(-(\\d{2}))??(-(\\d{2}))??(T(\\d{2}):(\\d{2})(:(\\d{2}))??(\\.(\\d+))??(([\\+\\-]{1}\\d{2}:\\d{2})|Z)??)??$\&quot;)))&quot;, :offset 162, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #(re-find \&quot;^(\\d{4})(-(\\d{2}))??(-(\\d{2}))??(T(\\d{2}):(\\d{2})(:(\\d{2}))??(\\.(\\d+))??(([\\+\\-]{1}\\d{2}:\\d{2})|Z)??)\&quot;)))&quot;, :offset 159, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #(re-find \&quot;\\\&quot;^(\\\\d{4})(-(\\\\d{2}))??(-(\\\\d{2}))??(T(\\\\d{2}):(\\\\d{2})(:(\\\\d{2}))??(\\\\.(\\\\d+))??(([\\\\+\\\\-]{1}\\\\d{2}:\\\\d{2})|Z)??)??$\\\&quot;\&quot;)))&quot;, :offset 178, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(re-pattern \&quot;^(\\d{4})(-(\\d{2}))??(-(\\d{2}))??(T(\\d{2}):(\\d{2})(:(\\d{2}))??(\\.(\\d+))??(([\\+\\-]{1}\\d{2}:\\d{2})|Z)??)??$\&quot;)&quot;, :offset 119, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(re-pattern \&quot;^(d{4})(-(d{2}))??(-(d{2}))??(T(d{2}):(d{2})(:(d{2}))??(.(d+))??(([+-]{1}d{2}:d{2})|Z)??)??$\&quot;)&quot;, :offset 107, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(s/def :datetime/iso-string (s/and string? #\&quot;^(d{4})(-(d{2}))??(-(d{2}))??(T(d{2}):(d{2})(:(d{2}))??(.(d+))??(([+-]{1}d{2}:d{2})|Z)??)??$\&quot;))&quot;, :offset 140, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(defn select-month []\n  (let [main-date (rf/subscribe [:work-schedule/main-date])]\n    (fn []\n      [ant/form-item\n       [ant/date-picker-month-picker {:default-value (js/moment)\n                                      :value (-&gt; js/moment)\n                                      :on-change     (fn [date]\n                                                       (println\n                                                         (-&gt; date\n                                                             (.toIsoString))))}]])))&quot;, :offset 518, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(re-find #\&quot;^(d{4})(-(d{2}))??(-(d{2}))??(T(d{2}):(d{2})(:(d{2}))??(.(d+))??(([+-]{1}d{2}:d{2})|Z)??)??$\&quot;\n         \&quot;2017-01-24T18:32:04.908Z\&quot;)&quot;, :offset 141, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(re-find #\&quot;^(\\d{4})(-(\\d{2}))??(-(\\d{2}))??(T(\\d{2}):(\\d{2})(:(\\d{2}))??(\\.(\\d+))??(([\\+\\-]{1}\\d{2}:\\d{2})|Z)??)??$\&quot;\n         \&quot;2017-01-24T18:32:04.908Z\&quot;)&quot;, :offset 153, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(re-find #\&quot;^(\\d{4})(-(\\d{2}))??(-(\\d{2}))??(T(\\d{2}):(\\d{2})(:(\\d{2}))??(\\.(\\d+))??(([\\+\\-]{1}\\d{2}:\\d{2})|Z)??)??$\&quot;\n         \&quot;2017-01-24T18:32:04.908\&quot;)&quot;, :offset 152, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(re-find #\&quot;^(\\d{4})(-(\\d{2}))??(-(\\d{2}))??(T(\\d{2}):(\\d{2})(:(\\d{2}))??(\\.(\\d+))??(([\\+\\-]{1}\\d{2}:\\d{2})|Z)??)??$\&quot;\n         \&quot;2017-01-24T18:32:04.9\&quot;)&quot;, :offset 150, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(rf/reg-sub\n  :workers/by-workplace-id\n  :&lt;- [:workers/list]\n  (fn [workers [_ workplace-id]]\n    workplace-id))&quot;, :offset 112, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/subscribe [:workers/by-workplace-id \&quot;111\&quot;])&quot;, :offset 47, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/reg-sub\n  :workers/by-workplace-id\n  :&lt;- [:workers/list]\n  (fn [workers [_ workplace-id]]\n    (-&gt;&gt; workers\n         (filter #(= workplace-id (:worker/workplace %))))))&quot;, :offset 171, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/subscribe [:workers/by-workplace-id \&quot;59cd4fc48466bc2056615d661\&quot;])&quot;, :offset 69, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/subscribe [:workers/by-workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;])&quot;, :offset 68, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(s/def ::mytest (s/nilable string?))&quot;, :offset 36, :ns &quot;eckersdorf.db.specs&quot;} {:command &quot;(= (dt/now) (dt/now))&quot;, :offset 21, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(dt/equal? (dt/now) (dt/now))&quot;, :offset 29, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(conj #{{:a 1}} {:a 2})&quot;, :offset 23, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(conj #{{:a 1}} {:a 1})&quot;, :offset 23, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(defn work-schedule-view []\n  (let [days (rf/subscribe [:work-schedule/days])\n        workplace (rf/subscribe [:work-schedule/selected-workplace-id])\n        workers (reaction @(rf/subscribe [:workers/by-workplace-id @workplace]))]\n    (fn []\n      [ant/col\n       [ant/row {:type    :flex\n                 :justify :center}\n        [select-workplace]\n        [select-month]]\n       (doall (for [date @days\n                    :let [weekday (dt/day-of-week date)\n                          weekday-name (get long-weekdays weekday)]]\n                ^{:key (str date)}\n                [ant/col\n                 [ant/row\n                  [:h3 (str (dtf/unparse (dtf/formatter \&quot;yyyy-MM-dd\&quot;) date) \&quot; \&quot; weekday-name)]]\n                 [ant/row {:type :flex}\n                  [ant/col {:span  4\n                            :style {:border \&quot;1px solid #d9d9d9\&quot;}}\n                   \&quot;pracownik\&quot;]\n                  (doall (for [hour (range 6 21)]\n                           ^{:key hour}\n                           [ant/col {:span  1\n                                     :style {:border     \&quot;1px solid #d9d9d9\&quot;\n                                             :text-align :center}}\n                            (str hour \&quot;:00\&quot;)]))]\n                 (doall (for [{:keys [mongo/object-id\n                                      worker/first-name\n                                      worker/last-name\n                                      worker/working-hours]} @workers]\n                          ^{:key object-id}\n                          [ant/row {:type :flex}\n                           [ant/col {:span  4\n                                     :style {:border \&quot;1px solid #d9d9d9\&quot;}}\n                            (str first-name \&quot; \&quot; last-name)]\n                           (doall (for [hour (range 6 21)]\n                                    ^{:key hour}\n                                    [ant/col {:span            1\n                                              :on-click        (fn []\n                                                                 (let [datetime (dtc/to-string (dt/plus date (dt/hours hour)))\n                                                                       work {:work-schedule/datetime          datetime\n                                                                             :work-schedule/workplace-id      @workplace\n                                                                             :work-schedule/worker-id         object-id\n                                                                             :work-schedule/worker-first-name first-name\n                                                                             :work-schedule/worker-last-name  last-name\n                                                                             :work-schedule/work-type         \&quot;seller\&quot;}]\n                                                                   (rf/dispatch [:work-schedule/schedule-work work])))\n                                              :on-double-click (fn []\n                                                                 (let [works (mapv (fn [x]\n                                                                                     {:work-schedule/datetime     (dt/plus date (dt/hours (+ hour x)))\n                                                                                      :work-schedule/workplace-id @workplace\n                                                                                      :work-schedule/worker-id    object-id\n                                                                                      :work-schedule/work-type    \&quot;seller\&quot;})\n                                                                                   (range working-hours))]\n                                                                   (println works)))\n                                              :style           {:border \&quot;1px solid #d9d9d9\&quot;}}\n                                     nil]))]))\n                 [:br]\n                 ]))])))&quot;, :offset 4005, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(conj #{{:a/b \&quot;sex\&quot; :a/c 1}} {:a/b \&quot;sex1\&quot; :a/c 1})&quot;, :offset 50, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/schedule\n  (fn [db _]\n    db))&quot;, :offset 59, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/get {:work-schedule/datetime \&quot;2017-05-01T10:00:00.000Z\&quot;\n                                    :work-schedule/worker-id \&quot;59ed1989fe1b232a5593a5a7\&quot;\n                                    :work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;}])&quot;, :offset 268, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(time @(rf/subscribe [:work-schedule/get {:work-schedule/datetime     \&quot;2017-05-01T10:00:00.000Z\&quot;\n                                     :work-schedule/worker-id    \&quot;59ed1989fe1b232a5593a5a7\&quot;\n                                     :work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;}]))&quot;, :offset 284, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(swap! re-frame.db/app-db assoc :work-schedule/schedule [])&quot;, :offset 59, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:workers/by-id \&quot;59ed1989fe1b232a5593a5a7,\&quot;])&quot;, :offset 59, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/reg-sub\n  :workers/by-id\n  :&lt;- [:workers/list]\n  (fn [workers [_ worker-id]]\n    (-&gt;&gt; workers\n         (filter #(= worker-id (:mongo/object-id %)))\n         (first))))&quot;, :offset 171, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/subscribe [:workers/by-id \&quot;59ed1989fe1b232a5593a5a7\&quot;])&quot;, :offset 58, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/subscribe [:workers/by-id \&quot;59ed196efe1b232a5593a5a6\&quot;])&quot;, :offset 58, :ns &quot;eckersdorf.workers.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/clear\n  (fn [db _]\n    (assoc db :work-schedule/schedule [])))&quot;, :offset 91, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-event-db\n  :work-schedule/clear\n  (fn [db _]\n    (assoc db :work-schedule/schedule [])))&quot;, :offset 96, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/get\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/workplace-id\n                     work-schedule/datetime]}]]\n    (let [schedule (:work-schedule/schedule @db)]\n      (reaction\n        (-&gt;&gt; schedule\n             (filter (fn [m]\n                       (and (= worker-id (:work-schedule/worker-id m))\n                            (= workplace-id (:work-schedule/workplace-id m))\n                            (= datetime (:work-schedule/datetime m)))))\n             (first))))))&quot;, :offset 540, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/get nil])&quot;, :offset 39, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/get\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/workplace-id\n                     work-schedule/datetime]}]]\n    (let [schedule (:work-schedule/schedule @db)]\n      (println schedule)\n      (reagent.ratom/make-reaction\n        (-&gt;&gt; schedule\n             (filter (fn [m]\n                       (and (= worker-id (:work-schedule/worker-id m))\n                            (= workplace-id (:work-schedule/workplace-id m))\n                            (= datetime (:work-schedule/datetime m)))))\n             (first))))))&quot;, :offset 584, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/get\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/workplace-id\n                     work-schedule/datetime]}]]\n    (let [schedule (:work-schedule/schedule @db)]\n      (println schedule)\n      (reaction\n        (-&gt;&gt; schedule\n             (filter (fn [m]\n                       (and (= worker-id (:work-schedule/worker-id m))\n                            (= workplace-id (:work-schedule/workplace-id m))\n                            (= datetime (:work-schedule/datetime m)))))\n             (first))))))&quot;, :offset 565, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/get nil])&quot;, :offset 40, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/test\n  (fn [db _]\n    (let [schedule (:work-schedule/schedule @db)]\n      (reaction (first schedule)))))&quot;, :offset 137, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/test\n  (fn [db _]\n    (let [schedule @(rf/subscribe [:work-schedule/schedule])]\n      (reaction (first schedule)))))&quot;, :offset 149, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub-raw\n  :work-schedule/test\n  (fn [db _]\n    (let [schedule @(rf/subscribe [:work-schedule/schedule])]\n      (reaction schedule))))&quot;, :offset 141, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:work-schedule/test])&quot;, :offset 37, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/test])&quot;, :offset 36, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/get\n  :&lt;- [:work-schedule/schedule]\n  (fn [schedule [_ {:keys [work-schedule/worker-id\n                           work-schedule/workplace-id\n                           work-schedule/datetime]}]]\n    (-&gt;&gt; schedule\n         (filter (fn [m]\n                   (and (= worker-id (:work-schedule/worker-id m))\n                        (= workplace-id (:work-schedule/workplace-id m))\n                        (= datetime (:work-schedule/datetime m)))))\n         (first))))&quot;, :offset 494, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/dispatch [:work-schedule/clear])&quot;, :offset 36, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(ns eckersdorf.work-schedule.events\n  (:require [re-frame.core :as rf]\n            [cljs-time.core :as dt]\n            [cljs-time.periodic :as dtp]\n            [taoensso.encore :as ec :refer [path]]\n            [ajax.core :as ajax]\n            [eckersdorf.db.core :refer [-&gt;local-storage]]\n            [clj-time.coerce :as dtc]))&quot;, :offset 329, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(str/numeric? 0)&quot;, :offset 16, :ns &quot;eckersdorf.flex&quot;} {:command &quot;(str/numeric? \&quot;0\&quot;)&quot;, :offset 18, :ns &quot;eckersdorf.flex&quot;} {:command &quot;(str/parse-number 0)&quot;, :offset 20, :ns &quot;eckersdorf.flex&quot;} {:command &quot;(str/parse-number \&quot;0\&quot;)&quot;, :offset 22, :ns &quot;eckersdorf.flex&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/is-holiday?\n  :&lt;- [:work-schedule/schedule]\n  (fn [schedule [_ {:keys [work-schedule/workplace-id\n                           work-schedule/datetime]}]]\n    (-&gt;&gt; schedule\n         (filter (fn [m]\n                   (and (= workplace-id (:work-schedule/workplace-id m))\n                        (= datetime (:work-schedule/datetime m)))))\n         (first)\n         \n         )))&quot;, :offset 404, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/is-holiday?\n  :&lt;- [:work-schedule/schedule]\n  (fn [schedule [_ {:keys [work-schedule/workplace-id\n                           work-schedule/datetime]}]]\n    (-&gt;&gt; schedule\n         (filter (fn [m]\n                   (and (= workplace-id (:work-schedule/workplace-id m))\n                        (= datetime (:work-schedule/datetime m)))))\n         (first)\n         :work-schedule/work-type\n         )))&quot;, :offset 428, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/is-holiday?\n  :&lt;- [:work-schedule/schedule]\n  (fn [schedule [_ {:keys [work-schedule/workplace-id\n                           work-schedule/datetime]}]]\n    (-&gt;&gt; schedule\n         (filter (fn [m]\n                   (and (= workplace-id (:work-schedule/workplace-id m))\n                        (= datetime (:work-schedule/datetime m)))))\n         (first)\n         :work-schedule/work-type\n         (= \&quot;holiday\&quot;))))&quot;, :offset 441, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/is-holiday?\n               {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                :work-schedule/datetime (dtc/to-string (dt/date-time 2017 10 1 10))}])&quot;, :offset 199, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/is-holiday?\n               {:work-schedule/workplace-id \&quot;59cd4fc48466bc2056615d66\&quot;\n                :work-schedule/datetime     (dtc/to-string (dt/date-time 2017 10 1 10))}])&quot;, :offset 203, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/dispatch [:work-schedule/schedule])&quot;, :offset 39, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/schedule\n  (fn [db _]\n    (:work-schedule/schedule db)))&quot;, :offset 85, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/dispatch [:work-schedule/schedule])&quot;, :offset 40, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(dt/first-day-of-the-month- (dt/now))&quot;, :offset 37, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;@(rf/subscribe [:workplaces/list])&quot;, :offset 34, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/hours-worked-in-month\n  :&lt;- [:work-schedule/schedule]\n  (fn [schedule [_ worker-id workplace-id datetime]]\n    (let [begin-time (dt/first-day-of-the-month (dtc/from-string datetime))\n          end-time (dt/plus (dt/last-day-of-the-month begin-time) (dt/days 1))]\n      (-&gt;&gt; schedule\n           (filter (fn [m]\n                     (let [date (dtc/from-string (:work-schedule/datetime m))]\n                       (and (= worker-id (:work-schedule/worker-id m))\n                            (= workplace-id (:work-schedule/workplace-id m))\n                            (dt/within? begin-time end-time date)))))\n           (count)))))&quot;, :offset 658, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/hours-worked-in-month\n               \&quot;59ed196efe1b232a5593a5a6\&quot;\n               \&quot;59cd4fc48466bc2056615d66\&quot;\n               (dt/date-time 2017 8)])&quot;, :offset 174, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/hours-worked-in-month\n               \&quot;59ed196efe1b232a5593a5a6\&quot;\n               \&quot;59cd4fc48466bc2056615d66\&quot;\n               (dtc/to-string (dt/date-time 2017 8))])&quot;, :offset 190, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(time (rf/subscribe [:work-schedule/hours-worked-in-month\n                \&quot;59ed196efe1b232a5593a5a6\&quot;\n                \&quot;59cd4fc48466bc2056615d66\&quot;\n                (dtc/to-string (dt/date-time 2017 8))]))&quot;, :offset 200, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/reg-sub\n  :work-schedule/hours-worked-in-month\n  (fn [db [_ {:keys [work-schedule/worker-id\n                     work-schedule/datetime]}]]\n    (get-in db [:work-schedule/stats worker-id :hours-worked-in-month])))&quot;, :offset 217, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:workers/list])&quot;, :offset 30, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(rf/subscribe [:work-schedule/hours-worked-in-month {:work-schedule/worker-id \&quot;59ed196efe1b232a5593a5a6\&quot;}])&quot;, :offset 107, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(defn vbox [{:keys [size justify-content align-items align-self gap\n                    min-width width max-width\n                    min-height height max-height]\n             :or   {justify-content :start \n                    align-items :stretch size :none}}]\n  (let [this (r/current-component)\n        props (apply dissoc (r/props this) all-prop-keys)\n        gap-form (when gap [gap_ {:size gap}])\n        children (if gap\n                   (interpose gap-form (filter identity (r/children this)))\n                   (r/children this))]\n    (into [:div (r/merge-props {:style (-&gt; {}\n                                           (assoc-some :min-width min-width\n                                                       :width width\n                                                       :max-width max-width\n                                                       :min-height min-height\n                                                       :height height\n                                                       :max-height max-height)\n                                           (display)\n                                           (flex size)\n                                           (flow \&quot;column nowrap\&quot;)\n                                           (eckersdorf.flex/justify-content justify-content)\n                                           (eckersdorf.flex/align-items align-items)\n                                           (eckersdorf.flex/align-self align-self))}\n                               props)]\n          children)))&quot;, :offset 1533, :ns &quot;eckersdorf.flex&quot;} {:command &quot;(rf/clear-subscription-cache!)&quot;, :offset 30, :ns &quot;eckersdorf.work-schedule.subs&quot;} {:command &quot;(ns eckersdorf.figwheel\n  (:require [figwheel-sidecar.repl-api :refer :all]))&quot;, :offset 77, :ns &quot;eckersdorf.figwheel&quot;} {:command &quot;(cljs-repl)&quot;, :offset 11, :ns &quot;eckersdorf.figwheel&quot;} {:command &quot;(rf/subscribe [:work-schedule/schedule])&quot;, :offset 40, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(count @(rf/subscribe [:work-schedule/schedule]))&quot;, :offset 49, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(dt/now)&quot;, :offset 8, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(dt/first-day-of-the-month (dt/now))&quot;, :offset 36, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;@(rf/subscribe [:workers/by-workplace-id])&quot;, :offset 42, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;@(rf/subscribe [:workers/list])&quot;, :offset 31, :ns &quot;eckersdorf.work-schedule.ui&quot;} {:command &quot;(rf/dispatch :work-schedule/ajax.get-work-schedule)&quot;, :offset 51, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-event-fx\n  :work-schedule/ajax.get-work-schedule\n  (fn [{db :db} _]\n    (let [workplace-id (:work-schedule/workplace-id db)\n          datetime (:work-schedule/main-date db)]\n      (println workplace-id datetime)\n      {:http-xhrio {:method          :get\n                    :uri             (path \&quot;/api/1.0/work-schedule\&quot;)\n                    :params          {:work-schedule/workplace-id workplace-id\n                                      :work-schedule/datetime     datetime}\n                    :response-format (ajax/json-response-format {:keywords? true})\n                    :on-success      [:work-schedule/ajax.get-work-schedule-success]\n                    :on-failure      [:work-schedule/ajax.get-work-schedule-failure]}})))&quot;, :offset 743, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/reg-event-fx\n  :work-schedule/ajax.get-work-schedule\n  (fn [{db :db} _]\n    (let [workplace-id (:work-schedule/selected-workplace-id db)\n          datetime (:work-schedule/main-date db)]\n      (println workplace-id datetime)\n      {:http-xhrio {:method          :get\n                    :uri             (path \&quot;/api/1.0/work-schedule\&quot;)\n                    :params          {:work-schedule/workplace-id workplace-id\n                                      :work-schedule/datetime     datetime}\n                    :response-format (ajax/json-response-format {:keywords? true})\n                    :on-success      [:work-schedule/ajax.get-work-schedule-success]\n                    :on-failure      [:work-schedule/ajax.get-work-schedule-failure]}})))&quot;, :offset 752, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/subscribe [:work-schedule/main-date])&quot;, :offset 41, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(type (rf/subscribe [:work-schedule/main-date]))&quot;, :offset 48, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(type @(rf/subscribe [:work-schedule/main-date]))&quot;, :offset 49, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(update {\&quot;sex\&quot; 1} \&quot;sex\&quot; inc)&quot;, :offset 28, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(dtc/from-string \&quot;20170901T061750\&quot;)&quot;, :offset 35, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;@(rf/subscribe [:work-schedule/schedule])&quot;, :offset 41, :ns &quot;eckersdorf.work-schedule.events&quot;} {:command &quot;(rf/dispatch [:work-schedule/ajax.get-work-schedule])&quot;, :offset 53, :ns &quot;eckersdorf.work-schedule.events&quot;}]}}</component>
  <component name="RunDashboard">
    <option name="ruleStates">
      <list>
        <RuleState>
          <option name="name" value="ConfigurationTypeDashboardGroupingRule" />
        </RuleState>
        <RuleState>
          <option name="name" value="StatusDashboardGroupingRule" />
        </RuleState>
      </list>
    </option>
  </component>
  <component name="RunManager" selected="Clojure REPL.lein">
    <configuration default="true" type="Applet" factoryName="Applet">
      <option name="WIDTH" value="400" />
      <option name="HEIGHT" value="300" />
      <option name="POLICY_FILE" value="$APPLICATION_HOME_DIR$/bin/appletviewer.policy" />
      <module />
    </configuration>
    <configuration default="true" type="Application" factoryName="Application">
      <extension name="coverage" enabled="false" merge="false" sample_coverage="true" runner="idea" />
      <option name="MAIN_CLASS_NAME" />
      <option name="VM_PARAMETERS" />
      <option name="PROGRAM_PARAMETERS" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="ALTERNATIVE_JRE_PATH_ENABLED" value="false" />
      <option name="ALTERNATIVE_JRE_PATH" />
      <option name="ENABLE_SWING_INSPECTOR" value="false" />
      <option name="ENV_VARIABLES" />
      <option name="PASS_PARENT_ENVS" value="true" />
      <module name="" />
      <envs />
    </configuration>
    <configuration default="true" type="#org.jetbrains.idea.devkit.run.PluginConfigurationType" factoryName="Plugin">
      <module name="" />
      <option name="VM_PARAMETERS" value="-Xmx512m -Xms256m -XX:MaxPermSize=250m -ea" />
      <option name="PROGRAM_PARAMETERS" />
      <predefined_log_file id="idea.log" enabled="true" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration default="true" type="Remote" factoryName="Remote">
      <option name="USE_SOCKET_TRANSPORT" value="true" />
      <option name="SERVER_MODE" value="false" />
      <option name="SHMEM_ADDRESS" value="javadebug" />
      <option name="HOST" value="localhost" />
      <option name="PORT" value="5005" />
    </configuration>
    <configuration name="eckersdorf.util" type="ClojureScriptRunConfiguration" factoryName="Clojure Script" temporary="true">
      <module name="eckersdorf" />
      <setting name="path" value="$PROJECT_DIR$/src/cljs/eckersdorf/util.cljs" />
      <setting name="namespace" value="" />
      <setting name="useLein" value="false" />
      <setting name="profiles" value="" />
      <setting name="vmparams" value="" />
      <setting name="params" value="" />
      <setting name="workDir" value="$PROJECT_DIR$/src/cljs/eckersdorf" />
    </configuration>
    <configuration name="figwheel" type="ClojureREPL" factoryName="Remote">
      <setting name="host" value="localhost" />
      <setting name="port" value="7002" />
      <setting name="replType" value="0" />
      <module name="eckersdorf" />
    </configuration>
    <configuration name="lein" type="ClojureREPL" factoryName="Local">
      <setting name="replType" value="1" />
      <module name="eckersdorf" />
      <setting name="jvmArgs" value="" />
      <setting name="parameters" value="" />
      <setting name="workingDir" value="$PROJECT_DIR$" />
      <setting name="profiles" value="" />
    </configuration>
    <list size="3">
      <item index="0" class="java.lang.String" itemvalue="Clojure REPL.lein" />
      <item index="1" class="java.lang.String" itemvalue="Clojure REPL.figwheel" />
      <item index="2" class="java.lang.String" itemvalue="Clojure Application.eckersdorf.util" />
    </list>
    <recent_temporary>
      <list size="1">
        <item index="0" class="java.lang.String" itemvalue="Clojure Application.eckersdorf.util" />
      </list>
    </recent_temporary>
  </component>
  <component name="ShelveChangesManager" show_recycled="false">
    <option name="remove_strategy" value="false" />
  </component>
  <component name="SvnConfiguration">
    <configuration />
  </component>
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="2d15cdde-731e-425d-93a7-18dba581f6ee" name="Default" comment="" />
      <created>1507756708400</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1507756708400</updated>
      <workItem from="1507756713340" duration="7165000" />
      <workItem from="1508091606158" duration="23499000" />
      <workItem from="1508271432360" duration="8241000" />
      <workItem from="1508681321148" duration="13175000" />
      <workItem from="1508861845101" duration="40262000" />
      <workItem from="1509094198154" duration="109000" />
      <workItem from="1509094332350" duration="3221000" />
      <workItem from="1509144365125" duration="2193000" />
      <workItem from="1509275925435" duration="32270000" />
    </task>
    <servers />
  </component>
  <component name="TimeTrackingManager">
    <option name="totallyTimeSpent" value="130137000" />
  </component>
  <component name="ToolWindowManager">
    <frame x="40" y="45" width="1230" height="995" extended-state="0" />
    <editor active="true" />
    <layout>
      <window_info id="Palette" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="10" side_tool="false" content_ui="tabs" />
      <window_info id="TODO" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="6" side_tool="false" content_ui="tabs" />
      <window_info id="Palette&#9;" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Image Layers" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Analysis" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Event Log" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="true" content_ui="tabs" />
      <window_info id="Maven Projects" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="REPL" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.30203044" sideWeight="0.5" order="6" side_tool="true" content_ui="tabs" />
      <window_info id="Version Control" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="9" side_tool="false" content_ui="tabs" />
      <window_info id="Run" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Leiningen" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="7" side_tool="false" content_ui="tabs" />
      <window_info id="Terminal" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Capture Tool" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Project" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="true" show_stripe_button="true" weight="0.17766498" sideWeight="0.4939759" order="1" side_tool="false" content_ui="combo" />
      <window_info id="Database" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="8" side_tool="false" content_ui="tabs" />
      <window_info id="Find" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.32779622" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Structure" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Ant Build" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="UI Designer" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
      <window_info id="Theme Preview" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="1" side_tool="false" content_ui="tabs" />
      <window_info id="Favorites" active="false" anchor="left" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.24962178" sideWeight="0.5060241" order="6" side_tool="true" content_ui="tabs" />
      <window_info id="Debug" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.3990964" sideWeight="0.5" order="3" side_tool="false" content_ui="tabs" />
      <window_info id="Cvs" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="tabs" />
      <window_info id="Message" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.33" sideWeight="0.5" order="0" side_tool="false" content_ui="tabs" />
      <window_info id="Commander" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="2" side_tool="false" content_ui="tabs" />
      <window_info id="Hierarchy" active="false" anchor="right" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.25" sideWeight="0.5" order="4" side_tool="false" content_ui="combo" />
      <window_info id="Inspection" active="false" anchor="bottom" auto_hide="false" internal_type="DOCKED" type="DOCKED" visible="false" show_stripe_button="true" weight="0.4" sideWeight="0.5" order="5" side_tool="false" content_ui="tabs" />
    </layout>
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="1" />
  </component>
  <component name="VcsContentAnnotationSettings">
    <option name="myLimit" value="2678400000" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager />
    <watches-manager />
  </component>
  <component name="editorHistoryManager">
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/services/workers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="1035">
          <caret line="45" column="52" lean-forward="false" selection-start-line="45" selection-start-column="52" selection-end-line="45" selection-end-column="52" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljc/eckersdorf/db/specs.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="2070">
          <caret line="90" column="25" lean-forward="false" selection-start-line="90" selection-start-column="25" selection-end-line="90" selection-end-column="25" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/routes/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/clj/eckersdorf/db/work_schedule.clj" />
    <entry file="file://$PROJECT_DIR$/env/dev/clj/eckersdorf/repl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="289">
          <caret line="57" column="6" lean-forward="false" selection-start-line="57" selection-start-column="6" selection-end-line="57" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/env/dev/clj/eckersdorf/figwheel.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="69">
          <caret line="3" column="10" lean-forward="false" selection-start-line="3" selection-start-column="10" selection-end-line="3" selection-end-column="10" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/repl.cljs" />
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/db.cljs" />
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/subs.cljs" />
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/ui.cljs" />
    <entry file="file://$PROJECT_DIR$/src/cljs/eckersdorf/work_schedule/events.cljs" />
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/utils.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="478">
          <caret line="24" column="14" lean-forward="false" selection-start-line="24" selection-start-column="14" selection-end-line="24" selection-end-column="14" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/db.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="253">
          <caret line="11" column="73" lean-forward="false" selection-start-line="11" selection-start-column="73" selection-end-line="11" selection-end-column="73" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/db/workers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/env/dev/clj/eckersdorf/figwheel.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="69">
          <caret line="3" column="10" lean-forward="false" selection-start-line="3" selection-start-column="10" selection-end-line="3" selection-end-column="10" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/com/andrewmcveigh/cljs-time/0.5.1/cljs-time-0.5.1.jar!/cljs_time/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="305">
          <caret line="678" column="65" lean-forward="false" selection-start-line="678" selection-start-column="65" selection-end-line="678" selection-end-column="65" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/workplaces.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-276">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/subs.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="322">
          <caret line="79" column="0" lean-forward="false" selection-start-line="79" selection-start-column="0" selection-end-line="79" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/workers.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="428">
          <caret line="51" column="93" lean-forward="false" selection-start-line="51" selection-start-column="93" selection-end-line="51" selection-end-column="93" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/routes/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="161">
          <caret line="7" column="37" lean-forward="false" selection-start-line="7" selection-start-column="37" selection-end-line="7" selection-end-column="37" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/env/dev/cljs/eckersdorf/repl.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workplaces/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="377">
          <caret line="167" column="23" lean-forward="false" selection-start-line="167" selection-start-column="23" selection-end-line="167" selection-end-column="23" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workplaces/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="286">
          <caret line="32" column="71" lean-forward="false" selection-start-line="32" selection-start-column="71" selection-end-line="32" selection-end-column="71" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/user/login/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="432">
          <caret line="48" column="29" lean-forward="false" selection-start-line="48" selection-start-column="29" selection-end-line="48" selection-end-column="29" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/user/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="263">
          <caret line="54" column="12" lean-forward="false" selection-start-line="54" selection-start-column="12" selection-end-line="54" selection-end-column="12" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="263">
          <caret line="108" column="72" lean-forward="false" selection-start-line="108" selection-start-column="72" selection-end-line="108" selection-end-column="72" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="263">
          <caret line="209" column="57" lean-forward="false" selection-start-line="209" selection-start-column="57" selection-end-line="209" selection-end-column="57" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/nrepl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/view/subs.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/view/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="147">
          <caret line="14" column="0" lean-forward="false" selection-start-line="14" selection-start-column="0" selection-end-line="14" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/layout.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/core.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="354">
          <caret line="17" column="22" lean-forward="false" selection-start-line="17" selection-start-column="6" selection-end-line="17" selection-end-column="22" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/dev-resources/public/js/main.js">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/env/dev/cljs/eckersdorf/app.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="299">
          <caret line="13" column="19" lean-forward="false" selection-start-line="13" selection-start-column="19" selection-end-line="13" selection-end-column="19" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/env/prod/cljs/eckersdorf/app.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="46">
          <caret line="2" column="0" lean-forward="false" selection-start-line="2" selection-start-column="0" selection-end-line="2" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/workers/subs.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="828">
          <caret line="36" column="31" lean-forward="false" selection-start-line="36" selection-start-column="31" selection-end-line="36" selection-end-column="31" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/core.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="276">
          <caret line="12" column="0" lean-forward="false" selection-start-line="12" selection-start-column="0" selection-end-line="12" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$PROJECT_DIR$/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="118">
          <caret line="59" column="70" lean-forward="false" selection-start-line="59" selection-start-column="63" selection-end-line="59" selection-end-column="70" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/bidi/bidi/2.1.2/bidi-2.1.2.jar!/bidi/vhosts.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="281">
          <caret line="52" column="6" lean-forward="false" selection-start-line="52" selection-start-column="6" selection-end-line="52" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/system.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="0">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="jar://$MAVEN_REPOSITORY$/yada/aleph/1.2.8/aleph-1.2.8.jar!/yada/aleph.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="184">
          <caret line="8" column="6" lean-forward="false" selection-start-line="8" selection-start-column="6" selection-end-line="8" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/server.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="345">
          <caret line="15" column="18" lean-forward="true" selection-start-line="15" selection-start-column="18" selection-end-line="15" selection-end-column="18" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/project.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="277">
          <caret line="52" column="39" lean-forward="true" selection-start-line="52" selection-start-column="39" selection-end-line="52" selection-end-column="39" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/resources/config.edn">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="69">
          <caret line="3" column="21" lean-forward="false" selection-start-line="3" selection-start-column="21" selection-end-line="3" selection-end-column="21" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/events.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="207">
          <caret line="321" column="6" lean-forward="false" selection-start-line="321" selection-start-column="6" selection-end-line="321" selection-end-column="6" />
          <folding>
            <marker date="1509398253804" expanded="true" signature="1454:1488" ph="(rf/reg-event-db ...)" />
          </folding>
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/db/work_schedule.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="601">
          <caret line="89" column="5" lean-forward="true" selection-start-line="89" selection-start-column="5" selection-end-line="89" selection-end-column="5" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/clj/eckersdorf/routes/services/work_schedule.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="667">
          <caret line="51" column="51" lean-forward="false" selection-start-line="51" selection-start-column="51" selection-end-line="51" selection-end-column="51" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/env/dev/clj/eckersdorf/repl.clj">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="396">
          <caret line="59" column="6" lean-forward="false" selection-start-line="59" selection-start-column="6" selection-end-line="59" selection-end-column="6" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljc/eckersdorf/db/specs.cljc">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="601">
          <caret line="92" column="72" lean-forward="false" selection-start-line="92" selection-start-column="72" selection-end-line="92" selection-end-column="72" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/view/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="-595">
          <caret line="0" column="0" lean-forward="false" selection-start-line="0" selection-start-column="0" selection-end-line="0" selection-end-column="0" />
          <folding />
        </state>
      </provider>
    </entry>
    <entry file="file://$USER_HOME$/data/code/Clojure/eckersdorf/src/cljs/eckersdorf/work_schedule/ui.cljs">
      <provider selected="true" editor-type-id="text-editor">
        <state relative-caret-position="327">
          <caret line="274" column="77" lean-forward="false" selection-start-line="274" selection-start-column="77" selection-end-line="274" selection-end-column="77" />
          <folding>
            <marker date="1509398869651" expanded="true" signature="2241:2247" ph="(defn work-cell ...)" />
          </folding>
        </state>
      </provider>
    </entry>
  </component>
  <component name="masterDetails">
    <states>
      <state key="ArtifactsStructureConfigurable.UI">
        <settings>
          <artifact-editor />
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="Copyright.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="FacetStructureConfigurable.UI">
        <settings>
          <last-edited>No facets are configured</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="GlobalLibrariesConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="JdkListConfigurable.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ModuleStructureConfigurable.UI">
        <settings>
          <last-edited>eckersdorf</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
                <option value="0.6" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectJDKs.UI">
        <settings>
          <last-edited>1.8</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ProjectLibrariesConfigurable.UI">
        <settings>
          <last-edited>Leiningen: aero:1.1.2</last-edited>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
      <state key="ScopeChooserConfigurable.UI">
        <settings>
          <splitter-proportions>
            <option name="proportions">
              <list>
                <option value="0.2" />
              </list>
            </option>
          </splitter-proportions>
        </settings>
      </state>
    </states>
  </component>
</project>